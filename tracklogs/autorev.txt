[+] page accessed AUTOGRADER 2019-05-06 04:37:57pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 0
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 13
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 13 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 13
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
        )

    [testId] => 13
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a+b+c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sun(a,b)    :
    return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a+b+c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sun(a,b)    :
    return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 04:37:58pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a+b+c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a+b+c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-3p Colon not at end of function signature
    [points] => 22
    [max] => 3
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a+b+c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a+b+c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 22
    [max] => 3
)

+ writing answer to python file: def addThree(a,b,c) 
    return a+b+c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 13, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a+b+c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-20p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-20p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 20
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 04:37:59pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 23
    [max] => 2
)

+ checkCons() was succesful at test 13, qid 5
+ calling colonfixer(text); text: 
def sun(a,b)    :
    return a-b
def sun(a,b)    :
    return a-b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Colon after function signature
    [points] => 23
    [max] => 2
)

+ calling printkiller() for: def sun(a,b)    :
    return a-b
+ printkiller()  is called with text: def sun(a,b)    :
    return a-b
+ operating funcom for userAnswer: def sun(a,b)    :
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sun(a,b)    :
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sun(a,b)    :
    return a-b
+ function was not found at all in the user answer
+ returning the correct function : sub
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => bp Expecting function: "sub", found "sun"
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => b-2p Expecting function: "sub", found "sun"
    [points] => 21
    [max] => 2
)

+ replacing def sun(a,b)    :
    return a-b with sub
+ funrep() called, old answer: def sun(a,b)    :
    return a-b
+ funrep() called, new answer: def sub(a,b)    :
    return a-b
+ writing correct answer to python file: def sub(a,b)    :
    return a-b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 13, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b)    :
    return a-b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 04:37:59pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling colonfixer(text); text: 
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Colon after function signature
    [points] => 25
    [max] => 3
)

+ calling printkiller() for: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ printkiller()  is called with text: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ operating funcom for userAnswer: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 25
    [max] => 3
)

+ writing answer to python file: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 13, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ status of exec was 0. program executed succesfully
+ comparing operation('+',3,3)=6 with output : 6
+ comparing c: None with output : 6
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('+',3,3),  expected answer: "6", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('+',3,3),  expected answer: "6", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

+ comparing operation('-',3,3)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called operation('-',3,3), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Called operation('-',3,3), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ comparing operation('/',3,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called operation('/',3,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Called operation('/',3,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('/',3,3), expected: "1", got "1"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('/',3,3), expected: "1", got "1"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('/',3,3), expected: "1", got "1"
    [points] => 22
    [max] => 3
)

+ comparing operation('*',3,3)=9 with output : 9
+ comparing c: None with output : 9
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('*',3,3),  expected answer: "9", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('*',3,3),  expected answer: "9", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 19
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 19
    [max] => 3
)

+ comparing operation('%',3,3)=0 with output : 0
+ comparing c: None with output : 0
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('%',3,3),  expected answer: "0", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('%',3,3),  expected answer: "0", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 16
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 16
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 16
    [max] => 3
)

+ comparing operation("?",3,3)=error with output : error
+ comparing c: None with output : error
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation("?",3,3),  expected answer: "error", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation("?",3,3),  expected answer: "error", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation("?",3,3),  expected answer: "error", got "None"
    [points] => 13
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation("?",3,3),  expected answer: "error", got "None"
    [points] => 13
    [max] => 3
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p user program successfully executed
    [points] => 13
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p user program successfully executed
    [points] => 13
    [max] => 20
)

counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 04:38:00pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() found for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np for loop was found
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p for loop was found
    [points] => 25
    [max] => 2
)

+ checkCons() was succesful at test 13, qid 8
+ calling colonfixer(text); text: 
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Colon after function signature
    [points] => 25
    [max] => 2
)

+ calling printkiller() for: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ printkiller()  is called with text: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ operating funcom for userAnswer: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 25
    [max] => 2
)

+ writing answer to python file: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 13, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
substr failed at getOut()+execom() calculated funperc: 80, max: 0.16
+ status of exec was 0. program executed succesfully
+ comparing tripleIt(0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(1)=3 with output : 3
+ comparing c: 3 with output : 3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(1), expected: "3", got "3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(1), expected: "3", got "3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(20)=60 with output : 60
+ comparing c: 60 with output : 60
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(20), expected: "60", got "60"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(20), expected: "60", got "60"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(-40)=-120 with output : -120
+ comparing c: -120 with output : -120
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-40), expected: "-120", got "-120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(-40), expected: "-120", got "-120"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 25
    [max] => 4
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 25
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 25
    [max] => 20
)

[+] page accessed AUTOGRADER 2019-05-06 05:10:43pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 47874
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 13
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 13 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 13
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
        )

    [testId] => 13
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a+b+c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sun(a,b)    :
    return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a+b+c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sun(a,b)    :
    return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 05:10:43pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a+b+c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a+b+c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a+b+c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a+b+c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-3p Colon not at end of function signature
    [points] => 22
    [max] => 3
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a+b+c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a+b+c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 22
    [max] => 3
)

+ writing answer to python file: def addThree(a,b,c) 
    return a+b+c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 13, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a+b+c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-20p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-20p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 20
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 05:10:44pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 23
    [max] => 2
)

+ checkCons() was succesful at test 13, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sun(a,b)    :
    return a-b
+ calling colonfixer(text); text: 
def sun(a,b)    :
    return a-b
+ trimming the whitespaces:  
def sun(a,b)    :
    return a-b
def sun(a,b)    :
    return a-b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Colon after function signature
    [points] => 23
    [max] => 2
)

+ calling printkiller() for: def sun(a,b)    :
    return a-b
+ printkiller()  is called with text: def sun(a,b)    :
    return a-b
+ operating funcom for userAnswer: def sun(a,b)    :
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sun(a,b)    :
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sun(a,b)    :
    return a-b
+ function was not found at all in the user answer
+ returning the correct function : sub
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => bp Expecting function: "sub", found "sun"
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => b-2p Expecting function: "sub", found "sun"
    [points] => 21
    [max] => 2
)

+ replacing def sun(a,b)    :
    return a-b with sub
+ funrep() called, old answer: def sun(a,b)    :
    return a-b
+ funrep() called, new answer: def sub(a,b)    :
    return a-b
+ writing correct answer to python file: def sub(a,b)    :
    return a-b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 13, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b)    :
    return a-b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 05:10:45pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ calling colonfixer(text); text: 
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ trimming the whitespaces:  
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Colon after function signature
    [points] => 25
    [max] => 3
)

+ calling printkiller() for: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ printkiller()  is called with text: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ operating funcom for userAnswer: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 25
    [max] => 3
)

+ writing answer to python file: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 13, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ status of exec was 0. program executed succesfully
+ comparing operation('+',3,3)=6 with output : 6
+ comparing c: None with output : 6
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('+',3,3),  expected answer: "6", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('+',3,3),  expected answer: "6", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

+ comparing operation('-',3,3)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called operation('-',3,3), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Called operation('-',3,3), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ comparing operation('/',3,3)=1 with output : 1
+ comparing c: 1.0 with output : 1
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('/',3,3),  expected answer: "1", got "1.0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('/',3,3),  expected answer: "1", got "1.0"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('/',3,3),  expected answer: "1", got "1.0"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('/',3,3),  expected answer: "1", got "1.0"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('/',3,3),  expected answer: "1", got "1.0"
    [points] => 19
    [max] => 3
)

+ comparing operation('*',3,3)=9 with output : 9
+ comparing c: None with output : 9
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('*',3,3),  expected answer: "9", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('*',3,3),  expected answer: "9", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 16
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 16
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 16
    [max] => 3
)

+ comparing operation('%',3,3)=0 with output : 0
+ comparing c: None with output : 0
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('%',3,3),  expected answer: "0", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('%',3,3),  expected answer: "0", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 13
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 13
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 13
    [max] => 3
)

+ comparing operation("?",3,3)=error with output : error
+ comparing c: None with output : error
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation("?",3,3),  expected answer: "error", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation("?",3,3),  expected answer: "error", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation("?",3,3),  expected answer: "error", got "None"
    [points] => 10
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation("?",3,3),  expected answer: "error", got "None"
    [points] => 10
    [max] => 3
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p user program successfully executed
    [points] => 10
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p user program successfully executed
    [points] => 10
    [max] => 20
)

counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 05:10:46pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() found for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np for loop was found
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p for loop was found
    [points] => 25
    [max] => 2
)

+ checkCons() was succesful at test 13, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ calling colonfixer(text); text: 
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ trimming the whitespaces:  
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Colon after function signature
    [points] => 25
    [max] => 2
)

+ calling printkiller() for: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ printkiller()  is called with text: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ operating funcom for userAnswer: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 25
    [max] => 2
)

+ writing answer to python file: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 13, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
substr failed at getOut()+execom() calculated funperc: 80, max: 0.16
+ status of exec was 0. program executed succesfully
+ comparing tripleIt(0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(1)=3 with output : 3
+ comparing c: 3 with output : 3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(1), expected: "3", got "3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(1), expected: "3", got "3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(20)=60 with output : 60
+ comparing c: 60 with output : 60
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(20), expected: "60", got "60"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(20), expected: "60", got "60"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(-40)=-120 with output : -120
+ comparing c: -120 with output : -120
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-40), expected: "-120", got "-120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(-40), expected: "-120", got "-120"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 25
    [max] => 4
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 25
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 25
    [max] => 20
)

[+] page accessed AUTOGRADER 2019-05-06 05:26:12pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 96769
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 13
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 13 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 13
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
        )

    [testId] => 13
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a+b+c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sun(a,b)    :
    return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a+b+c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sun(a,b)    :
    return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 05:26:12pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a+b+c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a+b+c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a+b+c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a+b+c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-3p Colon not at end of function signature
    [points] => 22
    [max] => 3
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a+b+c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a+b+c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a+b+c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 22
    [max] => 3
)

+ writing answer to python file: def addThree(a,b,c) 
    return a+b+c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 13, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a+b+c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-20p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 3
    [feedback] => b-20p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 20
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 05:26:13pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 23
    [max] => 2
)

+ checkCons() was succesful at test 13, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sun(a,b)    :
    return a-b
+ calling colonfixer(text); text: 
def sun(a,b)    :
    return a-b
+ trimming the whitespaces:  
def sun(a,b)    :
    return a-b
def sun(a,b)    :
    return a-b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Colon after function signature
    [points] => 23
    [max] => 2
)

+ calling printkiller() for: def sun(a,b)    :
    return a-b
+ printkiller()  is called with text: def sun(a,b)    :
    return a-b
+ operating funcom for userAnswer: def sun(a,b)    :
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sun(a,b)    :
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sun(a,b)    :
    return a-b
+ function was not found at all in the user answer
+ returning the correct function : sub
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => bp Expecting function: "sub", found "sun"
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => b-2p Expecting function: "sub", found "sun"
    [points] => 21
    [max] => 2
)

+ replacing def sun(a,b)    :
    return a-b with sub
+ funrep() called, old answer: def sun(a,b)    :
    return a-b
+ funrep() called, new answer: def sub(a,b)    :
    return a-b
+ writing correct answer to python file: def sub(a,b)    :
    return a-b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 13, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b)    :
    return a-b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 05:26:13pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ calling colonfixer(text); text: 
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ trimming the whitespaces:  
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Colon after function signature
    [points] => 25
    [max] => 3
)

+ calling printkiller() for: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ printkiller()  is called with text: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ operating funcom for userAnswer: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 25
    [max] => 3
)

+ writing answer to python file: def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 13, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operation(op, a,b):
    if op == '-':
        return a-b
    elif op == '/':
        return a/b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ status of exec was 0. program executed succesfully
+ comparing operation('+',3,3)=6 with output : 6
+ comparing c: None with output : 6
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('+',3,3),  expected answer: "6", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('+',3,3),  expected answer: "6", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('+',3,3),  expected answer: "6", got "None"
    [points] => 22
    [max] => 3
)

+ comparing operation('-',3,3)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called operation('-',3,3), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np Called operation('-',3,3), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p Called operation('-',3,3), expected: "0", got "0"
    [points] => 22
    [max] => 3
)

+ comparing operation('/',3,3)=1 with output : 1
+ comparing c: 1.0 with output : 1
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('/',3,3),  expected answer: "1", got "1.0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('/',3,3),  expected answer: "1", got "1.0"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('/',3,3),  expected answer: "1", got "1.0"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('/',3,3),  expected answer: "1", got "1.0"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('/',3,3),  expected answer: "1", got "1.0"
    [points] => 19
    [max] => 3
)

+ comparing operation('*',3,3)=9 with output : 9
+ comparing c: None with output : 9
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('*',3,3),  expected answer: "9", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('*',3,3),  expected answer: "9", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 16
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 16
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('*',3,3),  expected answer: "9", got "None"
    [points] => 16
    [max] => 3
)

+ comparing operation('%',3,3)=0 with output : 0
+ comparing c: None with output : 0
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation('%',3,3),  expected answer: "0", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation('%',3,3),  expected answer: "0", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 13
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 13
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation('%',3,3),  expected answer: "0", got "None"
    [points] => 13
    [max] => 3
)

+ comparing operation("?",3,3)=error with output : error
+ comparing c: None with output : error
fail!
+ calling updatePoints() to provide feedback
+ bp Called operation("?",3,3),  expected answer: "error", got "None"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => bp Called operation("?",3,3),  expected answer: "error", got "None"
    [subpoints] => 0.13333333333333
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation("?",3,3),  expected answer: "error", got "None"
    [points] => 10
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => b-3p Called operation("?",3,3),  expected answer: "error", got "None"
    [points] => 10
    [max] => 3
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 1
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 1
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p user program successfully executed
    [points] => 10
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 1
    [feedback] => n-0p user program successfully executed
    [points] => 10
    [max] => 20
)

counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 05:26:14pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() found for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np for loop was found
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p for loop was found
    [points] => 25
    [max] => 2
)

+ checkCons() was succesful at test 13, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ calling colonfixer(text); text: 
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ trimming the whitespaces:  
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Colon after function signature
    [points] => 25
    [max] => 2
)

+ calling printkiller() for: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ printkiller()  is called with text: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ operating funcom for userAnswer: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 25
    [max] => 2
)

+ writing answer to python file: def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 13, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(n):
    acc = 0
    for i in range(3):
        acc += n
    return(acc)
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
substr failed at getOut()+execom() calculated funperc: 80, max: 0.16
+ status of exec was 0. program executed succesfully
+ comparing tripleIt(0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(1)=3 with output : 3
+ comparing c: 3 with output : 3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(1), expected: "3", got "3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(1), expected: "3", got "3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(20)=60 with output : 60
+ comparing c: 60 with output : 60
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(20), expected: "60", got "60"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(20), expected: "60", got "60"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 25
    [max] => 4
)

+ comparing tripleIt(-40)=-120 with output : -120
+ comparing c: -120 with output : -120
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-40), expected: "-120", got "-120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np Called tripleIt(-40), expected: "-120", got "-120"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 25
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 25
    [max] => 4
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 13
    [qId] => 8
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 13 and qId = 8
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 25
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 13
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 25
    [max] => 20
)

[+] page accessed AUTOGRADER 2019-05-06 06:19:27pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 145664
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 14
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 14 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 14
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [4] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
            [4] => 2
        )

    [testId] => 14
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a + b + c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sub(a,b)
    return a - b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(a)
    return a*3
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [4] => Array
                (
                    [qId] => 2
                    [text] => def strMult(s, n)
    return s*n
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a + b + c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sub(a,b)
    return a - b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(a)
    return a*3
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [4] => Array
        (
            [qId] => 2
            [text] => def strMult(s, n)
    return s*n
            [tests] => Array
                (
                    [0] => strMult("hello",1)=hello
                    [1] => strMult("up", 4)=upupupup
                    [2] => strMult("hey", 3)=heyheyhey
                    [3] => strMult("aba", 2)=abaaba
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 06:19:29pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a + b + c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a + b + c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a + b + c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a + b + c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a + b + c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a + b + c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 18
    [max] => 2
)

+ writing answer to python file: def addThree(a,b,c) 
    return a + b + c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 14, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a + b + c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-16p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-16p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 06:19:29pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p  Print was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sub(a,b)
    return a - b
+ calling colonfixer(text); text: 
def sub(a,b)
    return a - b
+ trimming the whitespaces:  
def sub(a,b)
    return a - b
+ colon was not found in user answer
+ new answer: 
 def sub(a,b) 
    return a - b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def sub(a,b) 
    return a - b
+ printkiller()  is called with text: def sub(a,b) 
    return a - b
+ operating funcom for userAnswer: def sub(a,b) 
    return a - b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a,b) 
    return a - b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a,b) 
    return a - b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np Expecting function: "sub", found "sub"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Expecting function: "sub", found "sub"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def sub(a,b) 
    return a - b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 14, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b) 
    return a - b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-16p Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-16p Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 06:19:30pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ calling colonfixer(text); text: 
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ trimming the whitespaces:  
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ colon was not found in user answer
+ new answer: 
 def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ printkiller()  is called with text: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ operating funcom for userAnswer: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 18
    [max] => 2
)

+ writing answer to python file: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 14, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 06:19:30pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp For loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(a)
    return a*3
+ calling colonfixer(text); text: 
def tripleIt(a)
    return a*3
+ trimming the whitespaces:  
def tripleIt(a)
    return a*3
+ colon was not found in user answer
+ new answer: 
 def tripleIt(a) 
    return a*3
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def tripleIt(a) 
    return a*3
+ printkiller()  is called with text: def tripleIt(a) 
    return a*3
+ operating funcom for userAnswer: def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def tripleIt(a) 
    return a*3
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 14, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(a) 
    return a*3
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-16p Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-16p Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 5
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 2
+ clearning the python file for 2
+  page accessed by getCons 2019-05-06 06:19:31pm
+ received data : 
Array
(
    [qId] => 2
)

+ getCons() in backend  was succesful. data: 
{"cons":["for","print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
    [1] => print
)

+ getCons (2) success:
Array
(
    [0] => for
    [1] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp For loop was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp  Print was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p  Print was not found
    [points] => 18
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 2
+ calling newlinekiller(text) just in case the student spams newline characters
def strMult(s, n)
    return s*n
+ calling colonfixer(text); text: 
def strMult(s, n)
    return s*n
+ trimming the whitespaces:  
def strMult(s, n)
    return s*n
+ colon was not found in user answer
+ new answer: 
 def strMult(s, n) 
    return s*n
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p Colon not at end of function signature
    [points] => 17
    [max] => 1
)

+ calling printkiller() for: def strMult(s, n) 
    return s*n
+ printkiller()  is called with text: def strMult(s, n) 
    return s*n
+ operating funcom for userAnswer: def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Expecting function: "strMult", found "strMult"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Expecting function: "strMult", found "strMult"
    [points] => 17
    [max] => 1
)

+ writing answer to python file: def strMult(s, n) 
    return s*n
+ current testcase :  strMult("hello",1)=hello
+ current function : strMult("hello",1)
+ printout : print(strMult("hello",1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
)

+ now we are writing the testcase function strMult("hello",1) on the python file : 
+ current testcase :  strMult("up", 4)=upupupup
+ current function : strMult("up", 4)
+ printout : print(strMult("up", 4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
)

+ now we are writing the testcase function strMult("up", 4) on the python file : 
+ current testcase :  strMult("hey", 3)=heyheyhey
+ current function : strMult("hey", 3)
+ printout : print(strMult("hey", 3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
)

+ now we are writing the testcase function strMult("hey", 3) on the python file : 
+ current testcase :  strMult("aba", 2)=abaaba
+ current function : strMult("aba", 2)
+ printout : print(strMult("aba", 2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
    [3] => abaaba
)

+ now we are writing the testcase function strMult("aba", 2) on the python file : 
+ running execom() with pars for id : 14, qId : 2
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def strMult(s, n) 
    return s*n
print(strMult("hello",1))
print(strMult("up", 4))
print(strMult("hey", 3))
print(strMult("aba", 2))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-16p Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

    [points] => 1
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-16p Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

    [points] => 1
    [max] => 16
)

+ execom failed. pls check logs. 
[+] page accessed AUTOGRADER 2019-05-06 06:33:09pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 189489
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 1
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 1 will now be graded.
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [diff] => 4
                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 4
            [1] => 2
            [2] => 5
        )

    [testId] => 1
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 4
                    [text] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [qId] => 2
                    [text] => def strMult(s, n):
    return s*n
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [qId] => 5
                    [text] => def subtract(a,b) print(a - b)
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 4
            [text] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [tests] => Array
                (
                    [0] => factorial(2)=2
                    [1] => factorial(5)=120
                    [2] => factorial(3)=6
                    [3] => factorial(1)=1
                )

        )

    [1] => Array
        (
            [qId] => 2
            [text] => def strMult(s, n):
    return s*n
            [tests] => Array
                (
                    [0] => strMult("hello",1)=hello
                    [1] => strMult("up", 4)=upupupup
                    [2] => strMult("hey", 3)=heyheyhey
                    [3] => strMult("aba", 2)=abaaba
                )

        )

    [2] => Array
        (
            [qId] => 5
            [text] => def subtract(a,b) print(a - b)
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 4
+ clearning the python file for 4
+  page accessed by getCons 2019-05-06 06:33:11pm
+ received data : 
Array
(
    [qId] => 4
)

+ getCons() in backend  was succesful. data: 
{"cons":["while"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => while
)

+ getCons (4) success:
Array
(
    [0] => while
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find while in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => bp While loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => b-2p While loop was not found
    [points] => 23
    [max] => 2
)

+ checkCons() was succesful at test 1, qid 4
+ calling newlinekiller(text) just in case the student spams newline characters
def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ calling colonfixer(text); text: 
def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ trimming the whitespaces:  
def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Colon after function signature
    [points] => 23
    [max] => 2
)

+ calling printkiller() for: def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ printkiller()  is called with text: def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ operating funcom for userAnswer: def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np Expecting function: "factorial", found "factorial"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Expecting function: "factorial", found "factorial"
    [points] => 23
    [max] => 2
)

+ writing answer to python file: def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
+ current testcase :  factorial(2)=2
+ current function : factorial(2)
+ printout : print(factorial(2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
)

+ now we are writing the testcase function factorial(2) on the python file : 
+ current testcase :  factorial(5)=120
+ current function : factorial(5)
+ printout : print(factorial(5))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
)

+ now we are writing the testcase function factorial(5) on the python file : 
+ current testcase :  factorial(3)=6
+ current function : factorial(3)
+ printout : print(factorial(3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
    [2] => 6
)

+ now we are writing the testcase function factorial(3) on the python file : 
+ current testcase :  factorial(1)=1
+ current function : factorial(1)
+ printout : print(factorial(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
    [2] => 6
    [3] => 1
)

+ now we are writing the testcase function factorial(1) on the python file : 
+ running execom() with pars for id : 1, qId : 4
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
print(factorial(2))
print(factorial(5))
print(factorial(3))
print(factorial(1))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ status of exec was 0. program executed succesfully
+ comparing factorial(2)=2 with output : 2
+ comparing c: 2 with output : 2
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(2), expected: "2", got "2"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np Called factorial(2), expected: "2", got "2"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(2), expected: "2", got "2"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(2), expected: "2", got "2"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(2), expected: "2", got "2"
    [points] => 23
    [max] => 5
)

+ comparing factorial(5)=120 with output : 120
+ comparing c: 120 with output : 120
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(5), expected: "120", got "120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np Called factorial(5), expected: "120", got "120"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(5), expected: "120", got "120"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(5), expected: "120", got "120"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(5), expected: "120", got "120"
    [points] => 23
    [max] => 5
)

+ comparing factorial(3)=6 with output : 6
+ comparing c: 6 with output : 6
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(3), expected: "6", got "6"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np Called factorial(3), expected: "6", got "6"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(3), expected: "6", got "6"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(3), expected: "6", got "6"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(3), expected: "6", got "6"
    [points] => 23
    [max] => 5
)

+ comparing factorial(1)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(1), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np Called factorial(1), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(1), expected: "1", got "1"
    [points] => 23
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p Called factorial(1), expected: "1", got "1"
    [points] => 23
    [max] => 5
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 4
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 4
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p user program successfully executed
    [points] => 23
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 4
    [feedback] => n-0p user program successfully executed
    [points] => 23
    [max] => 20
)

counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 2
+ clearning the python file for 2
+  page accessed by getCons 2019-05-06 06:33:12pm
+ received data : 
Array
(
    [qId] => 2
)

+ getCons() in backend  was succesful. data: 
{"cons":["for","print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
    [1] => print
)

+ getCons (2) success:
Array
(
    [0] => for
    [1] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => bp For loop was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => b-2p For loop was not found
    [points] => 48
    [max] => 2
)

+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => bp  Print was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => b-2p  Print was not found
    [points] => 46
    [max] => 2
)

+ checkCons() was succesful at test 1, qid 2
+ calling newlinekiller(text) just in case the student spams newline characters
def strMult(s, n):
    return s*n
+ calling colonfixer(text); text: 
def strMult(s, n):
    return s*n
+ trimming the whitespaces:  
def strMult(s, n):
    return s*n
def strMult(s, n):
    return s*n
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Colon after function signature
    [points] => 46
    [max] => 3
)

+ calling printkiller() for: def strMult(s, n):
    return s*n
+ printkiller()  is called with text: def strMult(s, n):
    return s*n
+ operating funcom for userAnswer: def strMult(s, n):
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n):
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n):
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n):
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n):
    return s*n
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np Expecting function: "strMult", found "strMult"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Expecting function: "strMult", found "strMult"
    [points] => 46
    [max] => 3
)

+ writing answer to python file: def strMult(s, n):
    return s*n
+ current testcase :  strMult("hello",1)=hello
+ current function : strMult("hello",1)
+ printout : print(strMult("hello",1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
)

+ now we are writing the testcase function strMult("hello",1) on the python file : 
+ current testcase :  strMult("up", 4)=upupupup
+ current function : strMult("up", 4)
+ printout : print(strMult("up", 4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
)

+ now we are writing the testcase function strMult("up", 4) on the python file : 
+ current testcase :  strMult("hey", 3)=heyheyhey
+ current function : strMult("hey", 3)
+ printout : print(strMult("hey", 3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
)

+ now we are writing the testcase function strMult("hey", 3) on the python file : 
+ current testcase :  strMult("aba", 2)=abaaba
+ current function : strMult("aba", 2)
+ printout : print(strMult("aba", 2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
    [3] => abaaba
)

+ now we are writing the testcase function strMult("aba", 2) on the python file : 
+ running execom() with pars for id : 1, qId : 2
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def strMult(s, n):
    return s*n
print(strMult("hello",1))
print(strMult("up", 4))
print(strMult("hey", 3))
print(strMult("aba", 2))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ status of exec was 0. program executed succesfully
+ comparing strMult("hello",1)=hello with output : hello
+ comparing c: hello with output : hello
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("hello",1), expected: "hello", got "hello"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np Called strMult("hello",1), expected: "hello", got "hello"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 46
    [max] => 10
)

+ comparing strMult("up", 4)=upupupup with output : upupupup
+ comparing c: upupupup with output : upupupup
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("up", 4), expected: "upupupup", got "upupupup"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 46
    [max] => 10
)

+ comparing strMult("hey", 3)=heyheyhey with output : heyheyhey
+ comparing c: heyheyhey with output : heyheyhey
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 46
    [max] => 10
)

+ comparing strMult("aba", 2)=abaaba with output : abaaba
+ comparing c: abaaba with output : abaaba
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("aba", 2), expected: "abaaba", got "abaaba"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np Called strMult("aba", 2), expected: "abaaba", got "abaaba"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("aba", 2), expected: "abaaba", got "abaaba"
    [points] => 46
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p Called strMult("aba", 2), expected: "abaaba", got "abaaba"
    [points] => 46
    [max] => 10
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 2
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 2
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p user program successfully executed
    [points] => 46
    [max] => 40
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 2
    [feedback] => n-0p user program successfully executed
    [points] => 46
    [max] => 40
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 06:33:15pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() found print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 5
    [feedback] => np print was found.
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p print was found.
    [points] => 25
    [max] => 2
)

+ checkCons() was succesful at test 1, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def subtract(a,b) print(a - b)
+ calling colonfixer(text); text: 
def subtract(a,b) print(a - b)
+ trimming the whitespaces:  
def subtract(a,b) print(a - b)
+ colon was not found in user answer
+ new answer: 
 def subtract(a,b): print(a - b)
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => b-2p Colon not at end of function signature
    [points] => 23
    [max] => 2
)

+ calling printkiller() for: def subtract(a,b): print(a - b)
+ printkiller()  is called with text: def subtract(a,b): print(a - b)
+ printkiller() out: def subtract(a,b): return(a - b)
+ printkiller() done: 
def subtract(a,b): return(a - b)
+ operating funcom for userAnswer: def subtract(a,b): return(a - b)
+ np obtained function sub with funcom()
+ finding if sub is in user answer def subtract(a,b): return(a - b)
+ np obtained function sub with funcom()
+ finding if sub is in user answer def subtract(a,b): return(a - b)
+ function was not found at all in the user answer
+ returning the correct function : sub
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 5
    [feedback] => bp Expecting function: "sub", found "subtract"
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => b-2p Expecting function: "sub", found "subtract"
    [points] => 21
    [max] => 2
)

+ replacing def subtract(a,b): return(a - b) with sub
+ funrep() called, old answer: def subtract(a,b): return(a - b)
+ funrep() called, new answer: def sub(a,b): return(a - b)
+ writing correct answer to python file: def sub(a,b): return(a - b)
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 1, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b): return(a - b)
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 21
    [max] => 10
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 21
    [max] => 10
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 1
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 1 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 1
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 21
    [max] => 20
)

[+] page accessed AUTOGRADER 2019-05-06 07:03:05pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 226256
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 15
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 15 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 15
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
        )

    [testId] => 15
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a + b + c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a + b + c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 07:03:12pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a + b + c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a + b + c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a + b + c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a + b + c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 15
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 15 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => b-10p Colon not at end of function signature
    [points] => 90
    [max] => 10
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a + b + c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a + b + c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 15
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 15 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 90
    [max] => 10
)

+ writing answer to python file: def addThree(a,b,c) 
    return a + b + c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 15, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a + b + c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 15
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 15 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => b-80p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 10
    [max] => 80
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => b-80p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 10
    [max] => 80
)

+ execom failed. pls check logs. 
[+] page accessed AUTOGRADER 2019-05-06 07:08:16pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 237373
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ array of submittedTests are empty, returning false and terminating.
[+] page accessed AUTOGRADER 2019-05-06 07:08:27pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 239699
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 15
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 15 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 15
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
        )

    [testId] => 15
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a + b + c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a + b + c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 07:08:29pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a + b + c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a + b + c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a + b + c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a + b + c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 15
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 15 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => b-10p Colon not at end of function signature
    [points] => 90
    [max] => 10
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a + b + c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a + b + c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 15
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 15 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 90
    [max] => 10
)

+ writing answer to python file: def addThree(a,b,c) 
    return a + b + c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 15, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a + b + c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 15
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 15 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => b-80p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 10
    [max] => 80
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 15
    [qId] => 3
    [feedback] => b-80p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 10
    [max] => 80
)

+ execom failed. pls check logs. 
[+] page accessed AUTOGRADER 2019-05-06 07:53:37pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 250816
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ array of submittedTests are empty, returning false and terminating.
[+] page accessed AUTOGRADER 2019-05-06 07:54:10pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 253142
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 11
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 11 will now be graded.
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 14
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 14 will now be graded.
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 11
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [diff] => 4
                        )

                )

        )

    [1] => Array
        (
            [id] => 14
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [4] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 8
            [1] => 5
            [2] => 4
        )

    [testId] => 11
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(n):
    return n*3
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sud(a,b)    :
    return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 4
                    [text] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 8
            [text] => def tripleIt(n):
    return n*3
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sud(a,b)    :
    return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 4
            [text] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
            [tests] => Array
                (
                    [0] => factorial(2)=2
                    [1] => factorial(5)=120
                    [2] => factorial(3)=6
                    [3] => factorial(1)=1
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 07:54:11pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => bp For loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 11, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(n):
    return n*3
+ calling colonfixer(text); text: 
def tripleIt(n):
    return n*3
+ trimming the whitespaces:  
def tripleIt(n):
    return n*3
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 18
    [max] => 1
)

+ writing answer to python file:  
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 11, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 07:54:12pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 28
    [max] => 2
)

+ checkCons() was succesful at test 11, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sud(a,b)    :
    return a-b
+ calling colonfixer(text); text: 
def sud(a,b)    :
    return a-b
+ trimming the whitespaces:  
def sud(a,b)    :
    return a-b
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => b-2p Colon not at end of function signature
    [points] => 26
    [max] => 2
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function sub with funcom()
+ finding if sub is in user answer  
+ np obtained function sub with funcom()
+ finding if sub is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => np Expecting function: "sub", found "sub"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Expecting function: "sub", found "sub"
    [points] => 26
    [max] => 2
)

+ writing answer to python file:  
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 11, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => b-24p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

    [points] => 2
    [max] => 24
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => b-24p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

    [points] => 2
    [max] => 24
)

+ execom failed. pls check logs. 
counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 4
+ clearning the python file for 4
+  page accessed by getCons 2019-05-06 07:54:13pm
+ received data : 
Array
(
    [qId] => 4
)

+ getCons() in backend  was succesful. data: 
{"cons":["while"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => while
)

+ getCons (4) success:
Array
(
    [0] => while
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find while in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => bp While loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => b-3p While loop was not found
    [points] => 47
    [max] => 3
)

+ checkCons() was succesful at test 11, qid 4
+ calling newlinekiller(text) just in case the student spams newline characters
def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
+ calling colonfixer(text); text: 
def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
+ trimming the whitespaces:  
def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => b-3p Colon not at end of function signature
    [points] => 44
    [max] => 3
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer  
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer  
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer  
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np Expecting function: "factorial", found "factorial"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Expecting function: "factorial", found "factorial"
    [points] => 44
    [max] => 3
)

+ writing answer to python file:  
+ current testcase :  factorial(2)=2
+ current function : factorial(2)
+ printout : print(factorial(2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
)

+ now we are writing the testcase function factorial(2) on the python file : 
+ current testcase :  factorial(5)=120
+ current function : factorial(5)
+ printout : print(factorial(5))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
)

+ now we are writing the testcase function factorial(5) on the python file : 
+ current testcase :  factorial(3)=6
+ current function : factorial(3)
+ printout : print(factorial(3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
    [2] => 6
)

+ now we are writing the testcase function factorial(3) on the python file : 
+ current testcase :  factorial(1)=1
+ current function : factorial(1)
+ printout : print(factorial(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
    [2] => 6
    [3] => 1
)

+ now we are writing the testcase function factorial(1) on the python file : 
+ running execom() with pars for id : 11, qId : 4
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(factorial(2))
print(factorial(5))
print(factorial(3))
print(factorial(1))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'factorial' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'factorial' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => b-40p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'factorial' is not defined

    [points] => 4
    [max] => 40
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => b-40p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'factorial' is not defined

    [points] => 4
    [max] => 40
)

+ execom failed. pls check logs. 
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
            [4] => 2
        )

    [testId] => 14
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a + b + c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sub(a,b)
    return a - b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(a)
    return a*3
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [4] => Array
                (
                    [qId] => 2
                    [text] => def strMult(s, n)
    return s*n
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a + b + c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sub(a,b)
    return a - b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(a)
    return a*3
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [4] => Array
        (
            [qId] => 2
            [text] => def strMult(s, n)
    return s*n
            [tests] => Array
                (
                    [0] => strMult("hello",1)=hello
                    [1] => strMult("up", 4)=upupupup
                    [2] => strMult("hey", 3)=heyheyhey
                    [3] => strMult("aba", 2)=abaaba
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 07:54:14pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a + b + c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a + b + c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a + b + c
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer  
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer  
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer  
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer  
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer  
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 18
    [max] => 2
)

+ writing answer to python file:  
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 14, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'addThree' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'addThree' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'addThree' is not defined

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'addThree' is not defined

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 07:54:15pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p  Print was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sub(a,b)
    return a - b
+ calling colonfixer(text); text: 
def sub(a,b)
    return a - b
+ trimming the whitespaces:  
def sub(a,b)
    return a - b
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function sub with funcom()
+ finding if sub is in user answer  
+ np obtained function sub with funcom()
+ finding if sub is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np Expecting function: "sub", found "sub"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Expecting function: "sub", found "sub"
    [points] => 18
    [max] => 1
)

+ writing answer to python file:  
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 14, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'sub' is not defined

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 07:54:15pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ calling colonfixer(text); text: 
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ trimming the whitespaces:  
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function operation with funcom()
+ finding if operation is in user answer  
+ np obtained function operation with funcom()
+ finding if operation is in user answer  
+ np obtained function operation with funcom()
+ finding if operation is in user answer  
+ np obtained function operation with funcom()
+ finding if operation is in user answer  
+ np obtained function operation with funcom()
+ finding if operation is in user answer  
+ np obtained function operation with funcom()
+ finding if operation is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 18
    [max] => 2
)

+ writing answer to python file:  
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 14, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'operation' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'operation' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'operation' is not defined

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'operation' is not defined

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 07:54:16pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp For loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(a)
    return a*3
+ calling colonfixer(text); text: 
def tripleIt(a)
    return a*3
+ trimming the whitespaces:  
def tripleIt(a)
    return a*3
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 18
    [max] => 1
)

+ writing answer to python file:  
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 14, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'tripleIt' is not defined

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 5
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 2
+ clearning the python file for 2
+  page accessed by getCons 2019-05-06 07:54:17pm
+ received data : 
Array
(
    [qId] => 2
)

+ getCons() in backend  was succesful. data: 
{"cons":["for","print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
    [1] => print
)

+ getCons (2) success:
Array
(
    [0] => for
    [1] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp For loop was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp  Print was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p  Print was not found
    [points] => 18
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 2
+ calling newlinekiller(text) just in case the student spams newline characters
def strMult(s, n)
    return s*n
+ calling colonfixer(text); text: 
def strMult(s, n)
    return s*n
+ trimming the whitespaces:  
def strMult(s, n)
    return s*n
+ sanitize the text off characters. calling hiddencharkiller()

+ colon was not found in user answer
+ new answer: 
  
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p Colon not at end of function signature
    [points] => 17
    [max] => 1
)

+ calling printkiller() for:  
+ printkiller()  is called with text:  
+ operating funcom for userAnswer:  
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer  
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer  
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer  
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer  
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Expecting function: "strMult", found "strMult"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Expecting function: "strMult", found "strMult"
    [points] => 17
    [max] => 1
)

+ writing answer to python file:  
+ current testcase :  strMult("hello",1)=hello
+ current function : strMult("hello",1)
+ printout : print(strMult("hello",1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
)

+ now we are writing the testcase function strMult("hello",1) on the python file : 
+ current testcase :  strMult("up", 4)=upupupup
+ current function : strMult("up", 4)
+ printout : print(strMult("up", 4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
)

+ now we are writing the testcase function strMult("up", 4) on the python file : 
+ current testcase :  strMult("hey", 3)=heyheyhey
+ current function : strMult("hey", 3)
+ printout : print(strMult("hey", 3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
)

+ now we are writing the testcase function strMult("hey", 3) on the python file : 
+ current testcase :  strMult("aba", 2)=abaaba
+ current function : strMult("aba", 2)
+ printout : print(strMult("aba", 2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
    [3] => abaaba
)

+ now we are writing the testcase function strMult("aba", 2) on the python file : 
+ running execom() with pars for id : 14, qId : 2
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

 
print(strMult("hello",1))
print(strMult("up", 4))
print(strMult("hey", 3))
print(strMult("aba", 2))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'strMult' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'strMult' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'strMult' is not defined

    [points] => 1
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-16p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 3, in <module>
NameError: name 'strMult' is not defined

    [points] => 1
    [max] => 16
)

+ execom failed. pls check logs. 
[+] page accessed AUTOGRADER 2019-05-06 08:32:42pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 318230
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 14
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 14 will now be graded.
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 14
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [4] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
            [4] => 2
        )

    [testId] => 14
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a + b + c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sub(a,b)
    return a - b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(a)
    return a*3
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [4] => Array
                (
                    [qId] => 2
                    [text] => def strMult(s, n)
    return s*n
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a + b + c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sub(a,b)
    return a - b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(a)
    return a*3
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [4] => Array
        (
            [qId] => 2
            [text] => def strMult(s, n)
    return s*n
            [tests] => Array
                (
                    [0] => strMult("hello",1)=hello
                    [1] => strMult("up", 4)=upupupup
                    [2] => strMult("hey", 3)=heyheyhey
                    [3] => strMult("aba", 2)=abaaba
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 08:32:43pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a + b + c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a + b + c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a + b + c
+ sanitize the text off characters. calling hiddencharkiller()
def addThree(a,b,c)
    return a + b + c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c) 
    return a + b + c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for: def addThree(a,b,c) 
    return a + b + c
+ printkiller()  is called with text: def addThree(a,b,c) 
    return a + b + c
+ operating funcom for userAnswer: def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c) 
    return a + b + c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 18
    [max] => 2
)

+ writing answer to python file: def addThree(a,b,c) 
    return a + b + c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 14, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c) 
    return a + b + c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-16p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-16p Code failed to execute: line 2
def addThree(a,b,c)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 08:32:45pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p  Print was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sub(a,b)
    return a - b
+ calling colonfixer(text); text: 
def sub(a,b)
    return a - b
+ trimming the whitespaces:  
def sub(a,b)
    return a - b
+ sanitize the text off characters. calling hiddencharkiller()
def sub(a,b)
    return a - b
+ colon was not found in user answer
+ new answer: 
 def sub(a,b) 
    return a - b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def sub(a,b) 
    return a - b
+ printkiller()  is called with text: def sub(a,b) 
    return a - b
+ operating funcom for userAnswer: def sub(a,b) 
    return a - b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a,b) 
    return a - b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a,b) 
    return a - b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np Expecting function: "sub", found "sub"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Expecting function: "sub", found "sub"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def sub(a,b) 
    return a - b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 14, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b) 
    return a - b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-16p Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-16p Code failed to execute: line 2
def sub(a,b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 08:32:46pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ calling colonfixer(text); text: 
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ trimming the whitespaces:  
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ sanitize the text off characters. calling hiddencharkiller()
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ colon was not found in user answer
+ new answer: 
 def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ printkiller()  is called with text: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ operating funcom for userAnswer: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 18
    [max] => 2
)

+ writing answer to python file: def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 14, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operation(op, a, b) 
    if op == '+' 
        return a + b
    elif op == '-' 
        return a - b
    elif op ==  '*' 
        return a * b
    elif op == '/' 
        return a / b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute: line 2
def operation(op, a, b)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 08:32:47pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp For loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(a)
    return a*3
+ calling colonfixer(text); text: 
def tripleIt(a)
    return a*3
+ trimming the whitespaces:  
def tripleIt(a)
    return a*3
+ sanitize the text off characters. calling hiddencharkiller()
def tripleIt(a)
    return a*3
+ colon was not found in user answer
+ new answer: 
 def tripleIt(a) 
    return a*3
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def tripleIt(a) 
    return a*3
+ printkiller()  is called with text: def tripleIt(a) 
    return a*3
+ operating funcom for userAnswer: def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a) 
    return a*3
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def tripleIt(a) 
    return a*3
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 14, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(a) 
    return a*3
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-16p Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-16p Code failed to execute: line 2
def tripleIt(a)
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 5
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 2
+ clearning the python file for 2
+  page accessed by getCons 2019-05-06 08:32:48pm
+ received data : 
Array
(
    [qId] => 2
)

+ getCons() in backend  was succesful. data: 
{"cons":["for","print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
    [1] => print
)

+ getCons (2) success:
Array
(
    [0] => for
    [1] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp For loop was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp  Print was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p  Print was not found
    [points] => 18
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 2
+ calling newlinekiller(text) just in case the student spams newline characters
def strMult(s, n)
    return s*n
+ calling colonfixer(text); text: 
def strMult(s, n)
    return s*n
+ trimming the whitespaces:  
def strMult(s, n)
    return s*n
+ sanitize the text off characters. calling hiddencharkiller()
def strMult(s, n)
    return s*n
+ colon was not found in user answer
+ new answer: 
 def strMult(s, n) 
    return s*n
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p Colon not at end of function signature
    [points] => 17
    [max] => 1
)

+ calling printkiller() for: def strMult(s, n) 
    return s*n
+ printkiller()  is called with text: def strMult(s, n) 
    return s*n
+ operating funcom for userAnswer: def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n) 
    return s*n
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Expecting function: "strMult", found "strMult"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Expecting function: "strMult", found "strMult"
    [points] => 17
    [max] => 1
)

+ writing answer to python file: def strMult(s, n) 
    return s*n
+ current testcase :  strMult("hello",1)=hello
+ current function : strMult("hello",1)
+ printout : print(strMult("hello",1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
)

+ now we are writing the testcase function strMult("hello",1) on the python file : 
+ current testcase :  strMult("up", 4)=upupupup
+ current function : strMult("up", 4)
+ printout : print(strMult("up", 4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
)

+ now we are writing the testcase function strMult("up", 4) on the python file : 
+ current testcase :  strMult("hey", 3)=heyheyhey
+ current function : strMult("hey", 3)
+ printout : print(strMult("hey", 3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
)

+ now we are writing the testcase function strMult("hey", 3) on the python file : 
+ current testcase :  strMult("aba", 2)=abaaba
+ current function : strMult("aba", 2)
+ printout : print(strMult("aba", 2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
    [3] => abaaba
)

+ now we are writing the testcase function strMult("aba", 2) on the python file : 
+ running execom() with pars for id : 14, qId : 2
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def strMult(s, n) 
    return s*n
print(strMult("hello",1))
print(strMult("up", 4))
print(strMult("hey", 3))
print(strMult("aba", 2))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-16p Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

    [points] => 1
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-16p Code failed to execute: line 2
def strMult(s, n)
SyntaxError: invalid syntax

    [points] => 1
    [max] => 16
)

+ execom failed. pls check logs. 
[+] page accessed AUTOGRADER 2019-05-06 08:46:11pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 362840
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 14
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 14 will now be graded.
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 14
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [4] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
            [3] => 8
            [4] => 2
        )

    [testId] => 14
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a + b + c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sub(a,b)
    return a - b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(a)
    return a*3
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [4] => Array
                (
                    [qId] => 2
                    [text] => def strMult(s, n)
    return s*n
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a + b + c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sub(a,b)
    return a - b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripleIt(a)
    return a*3
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [4] => Array
        (
            [qId] => 2
            [text] => def strMult(s, n)
    return s*n
            [tests] => Array
                (
                    [0] => strMult("hello",1)=hello
                    [1] => strMult("up", 4)=upupupup
                    [2] => strMult("hey", 3)=heyheyhey
                    [3] => strMult("aba", 2)=abaaba
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 08:46:13pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a + b + c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a + b + c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a + b + c
+ sanitize the text off characters. calling hiddencharkiller()
def addThree(a,b,c) 
    return a + b + c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c): 
    return a + b + c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for: def addThree(a,b,c): 
    return a + b + c
+ printkiller()  is called with text: def addThree(a,b,c): 
    return a + b + c
+ operating funcom for userAnswer: def addThree(a,b,c): 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a + b + c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a + b + c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 18
    [max] => 2
)

+ writing answer to python file: def addThree(a,b,c): 
    return a + b + c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 14, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c): 
    return a + b + c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ status of exec was 0. program executed succesfully
+ comparing addThree(100, 200, 300)=600 with output : 600
+ comparing c: 600 with output : 600
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(100, 200, 300), expected: "600", got "600"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Called addThree(100, 200, 300), expected: "600", got "600"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(100, 200, 300), expected: "600", got "600"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(100, 200, 300), expected: "600", got "600"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(100, 200, 300), expected: "600", got "600"
    [points] => 18
    [max] => 3
)

+ comparing addThree(-7, 0, 19)=12 with output : 12
+ comparing c: 12 with output : 12
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(-7, 0, 19), expected: "12", got "12"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Called addThree(-7, 0, 19), expected: "12", got "12"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(-7, 0, 19), expected: "12", got "12"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(-7, 0, 19), expected: "12", got "12"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(-7, 0, 19), expected: "12", got "12"
    [points] => 18
    [max] => 3
)

+ comparing addThree(-1,-1,-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(-1,-1,-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [points] => 18
    [max] => 3
)

+ comparing addThree(1,2,3)=6 with output : 6
+ comparing c: 6 with output : 6
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(1,2,3), expected: "6", got "6"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Called addThree(1,2,3), expected: "6", got "6"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(1,2,3), expected: "6", got "6"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(1,2,3), expected: "6", got "6"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(1,2,3), expected: "6", got "6"
    [points] => 18
    [max] => 3
)

+ comparing addThree(4,5,6)=15 with output : 15
+ comparing c: 15 with output : 15
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(4,5,6), expected: "15", got "15"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Called addThree(4,5,6), expected: "15", got "15"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(4,5,6), expected: "15", got "15"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(4,5,6), expected: "15", got "15"
    [points] => 18
    [max] => 3
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(4,5,6), expected: "15", got "15"
    [points] => 18
    [max] => 3
)

+ comparing addThree(0,0,0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(0,0,0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np Called addThree(0,0,0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(0,0,0), expected: "0", got "0"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p Called addThree(0,0,0), expected: "0", got "0"
    [points] => 18
    [max] => 3
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 3
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 3
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p user program successfully executed
    [points] => 18
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 3
    [feedback] => n-0p user program successfully executed
    [points] => 18
    [max] => 16
)

counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 08:46:14pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p  Print was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sub(a,b)
    return a - b
+ calling colonfixer(text); text: 
def sub(a,b)
    return a - b
+ trimming the whitespaces:  
def sub(a,b)
    return a - b
+ sanitize the text off characters. calling hiddencharkiller()
def sub(a,b) 
    return a - b
+ colon was not found in user answer
+ new answer: 
 def sub(a,b): 
    return a - b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def sub(a,b): 
    return a - b
+ printkiller()  is called with text: def sub(a,b): 
    return a - b
+ operating funcom for userAnswer: def sub(a,b): 
    return a - b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a,b): 
    return a - b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a,b): 
    return a - b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np Expecting function: "sub", found "sub"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Expecting function: "sub", found "sub"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def sub(a,b): 
    return a - b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 14, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b): 
    return a - b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 18
    [max] => 8
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 18
    [max] => 8
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 18
    [max] => 8
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 18
    [max] => 8
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 18
    [max] => 8
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 18
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 18
    [max] => 16
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 08:46:15pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ calling colonfixer(text); text: 
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ trimming the whitespaces:  
def operation(op, a, b)
    if op == '+':
        return a + b
    elif op == '-':
        return a - b
    elif op ==  '*':
        return a * b
    elif op == '/':
        return a / b
+ sanitize the text off characters. calling hiddencharkiller()
def operation(op, a, b) 
    if op == '+': 
        return a + b 
    elif op == '-': 
        return a - b 
    elif op ==  '*': 
        return a * b 
    elif op == '/': 
        return a / b
+ colon was not found in user answer
+ new answer: 
 def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-2p Colon not at end of function signature
    [points] => 18
    [max] => 2
)

+ calling printkiller() for: def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ printkiller()  is called with text: def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ operating funcom for userAnswer: def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 18
    [max] => 2
)

+ writing answer to python file: def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 14, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operation(op, a, b): 
    if op == '+'  
        return a + b 
    elif op == '-'  
        return a - b 
    elif op ==  '*'  
        return a * b 
    elif op == '/'  
        return a / b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 3
if op == '+'
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 1
    [feedback] => bp Code failed to execute: line 3
if op == '+'
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute: line 3
if op == '+'
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 1
    [feedback] => b-16p Code failed to execute: line 3
if op == '+'
SyntaxError: invalid syntax

    [points] => 2
    [max] => 16
)

+ execom failed. pls check logs. 
counter is 4
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 08:46:16pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp For loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(a)
    return a*3
+ calling colonfixer(text); text: 
def tripleIt(a)
    return a*3
+ trimming the whitespaces:  
def tripleIt(a)
    return a*3
+ sanitize the text off characters. calling hiddencharkiller()
def tripleIt(a) 
    return a*3
+ colon was not found in user answer
+ new answer: 
 def tripleIt(a): 
    return a*3
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def tripleIt(a): 
    return a*3
+ printkiller()  is called with text: def tripleIt(a): 
    return a*3
+ operating funcom for userAnswer: def tripleIt(a): 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a): 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a): 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a): 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a): 
    return a*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(a): 
    return a*3
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def tripleIt(a): 
    return a*3
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 14, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(a): 
    return a*3
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
substr failed at getOut()+execom() calculated funperc: 80, max: 0.16
+ status of exec was 0. program executed succesfully
+ comparing tripleIt(0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Called tripleIt(0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 18
    [max] => 3
)

+ comparing tripleIt(1)=3 with output : 3
+ comparing c: 3 with output : 3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(1), expected: "3", got "3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Called tripleIt(1), expected: "3", got "3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 18
    [max] => 3
)

+ comparing tripleIt(-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Called tripleIt(-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 18
    [max] => 3
)

+ comparing tripleIt(20)=60 with output : 60
+ comparing c: 60 with output : 60
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(20), expected: "60", got "60"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Called tripleIt(20), expected: "60", got "60"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 18
    [max] => 3
)

+ comparing tripleIt(-40)=-120 with output : -120
+ comparing c: -120 with output : -120
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-40), expected: "-120", got "-120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np Called tripleIt(-40), expected: "-120", got "-120"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 18
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 18
    [max] => 3
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 8
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 8
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 18
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 18
    [max] => 16
)

counter is 5
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 2
+ clearning the python file for 2
+  page accessed by getCons 2019-05-06 08:46:18pm
+ received data : 
Array
(
    [qId] => 2
)

+ getCons() in backend  was succesful. data: 
{"cons":["for","print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
    [1] => print
)

+ getCons (2) success:
Array
(
    [0] => for
    [1] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp For loop was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp  Print was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p  Print was not found
    [points] => 18
    [max] => 1
)

+ checkCons() was succesful at test 14, qid 2
+ calling newlinekiller(text) just in case the student spams newline characters
def strMult(s, n)
    return s*n
+ calling colonfixer(text); text: 
def strMult(s, n)
    return s*n
+ trimming the whitespaces:  
def strMult(s, n)
    return s*n
+ sanitize the text off characters. calling hiddencharkiller()
def strMult(s, n) 
    return s*n
+ colon was not found in user answer
+ new answer: 
 def strMult(s, n): 
    return s*n
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => b-1p Colon not at end of function signature
    [points] => 17
    [max] => 1
)

+ calling printkiller() for: def strMult(s, n): 
    return s*n
+ printkiller()  is called with text: def strMult(s, n): 
    return s*n
+ operating funcom for userAnswer: def strMult(s, n): 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return s*n
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return s*n
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Expecting function: "strMult", found "strMult"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Expecting function: "strMult", found "strMult"
    [points] => 17
    [max] => 1
)

+ writing answer to python file: def strMult(s, n): 
    return s*n
+ current testcase :  strMult("hello",1)=hello
+ current function : strMult("hello",1)
+ printout : print(strMult("hello",1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
)

+ now we are writing the testcase function strMult("hello",1) on the python file : 
+ current testcase :  strMult("up", 4)=upupupup
+ current function : strMult("up", 4)
+ printout : print(strMult("up", 4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
)

+ now we are writing the testcase function strMult("up", 4) on the python file : 
+ current testcase :  strMult("hey", 3)=heyheyhey
+ current function : strMult("hey", 3)
+ printout : print(strMult("hey", 3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
)

+ now we are writing the testcase function strMult("hey", 3) on the python file : 
+ current testcase :  strMult("aba", 2)=abaaba
+ current function : strMult("aba", 2)
+ printout : print(strMult("aba", 2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
    [3] => abaaba
)

+ now we are writing the testcase function strMult("aba", 2) on the python file : 
+ running execom() with pars for id : 14, qId : 2
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def strMult(s, n): 
    return s*n
print(strMult("hello",1))
print(strMult("up", 4))
print(strMult("hey", 3))
print(strMult("aba", 2))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ status of exec was 0. program executed succesfully
+ comparing strMult("hello",1)=hello with output : hello
+ comparing c: hello with output : hello
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("hello",1), expected: "hello", got "hello"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Called strMult("hello",1), expected: "hello", got "hello"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 17
    [max] => 4
)

+ comparing strMult("up", 4)=upupupup with output : upupupup
+ comparing c: upupupup with output : upupupup
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("up", 4), expected: "upupupup", got "upupupup"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 17
    [max] => 4
)

+ comparing strMult("hey", 3)=heyheyhey with output : heyheyhey
+ comparing c: heyheyhey with output : heyheyhey
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 17
    [max] => 4
)

+ comparing strMult("aba", 2)=abaaba with output : abaaba
+ comparing c: abaaba with output : abaaba
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("aba", 2), expected: "abaaba", got "abaaba"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np Called strMult("aba", 2), expected: "abaaba", got "abaaba"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("aba", 2), expected: "abaaba", got "abaaba"
    [points] => 17
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p Called strMult("aba", 2), expected: "abaaba", got "abaaba"
    [points] => 17
    [max] => 4
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 14
    [qId] => 2
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 14 and qId = 2
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p user program successfully executed
    [points] => 17
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 14
    [qId] => 2
    [feedback] => n-0p user program successfully executed
    [points] => 17
    [max] => 16
)

[+] page accessed AUTOGRADER 2019-05-06 08:50:23pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 425745
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 11
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 11 will now be graded.
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 11
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [diff] => 4
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 8
            [1] => 5
            [2] => 4
        )

    [testId] => 11
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 8
                    [text] => def tripleIt(n):
    return n*3
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sud(a,b)    :
    return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 4
                    [text] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 8
            [text] => def tripleIt(n):
    return n*3
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sud(a,b)    :
    return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 4
            [text] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
            [tests] => Array
                (
                    [0] => factorial(2)=2
                    [1] => factorial(5)=120
                    [2] => factorial(3)=6
                    [3] => factorial(1)=1
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 8
+ clearning the python file for 8
+  page accessed by getCons 2019-05-06 08:50:24pm
+ received data : 
Array
(
    [qId] => 8
)

+ getCons() in backend  was succesful. data: 
{"cons":["for"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
)

+ getCons (8) success:
Array
(
    [0] => for
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => bp For loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 11, qid 8
+ calling newlinekiller(text) just in case the student spams newline characters
def tripleIt(n):
    return n*3
+ calling colonfixer(text); text: 
def tripleIt(n):
    return n*3
+ trimming the whitespaces:  
def tripleIt(n):
    return n*3
+ sanitize the text off characters. calling hiddencharkiller()
def tripleIt(n): 
    return n*3
def tripleIt(n): 
    return n*3
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Colon after function signature
    [points] => 19
    [max] => 1
)

+ calling printkiller() for: def tripleIt(n): 
    return n*3
+ printkiller()  is called with text: def tripleIt(n): 
    return n*3
+ operating funcom for userAnswer: def tripleIt(n): 
    return n*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n): 
    return n*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n): 
    return n*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n): 
    return n*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n): 
    return n*3
+ np obtained function tripleIt with funcom()
+ finding if tripleIt is in user answer def tripleIt(n): 
    return n*3
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Expecting function: "tripleIt", found "tripleIt"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Expecting function: "tripleIt", found "tripleIt"
    [points] => 19
    [max] => 1
)

+ writing answer to python file: def tripleIt(n): 
    return n*3
substr failed at getOut()+ output was was detected empty at testcase: tripleIt(0)=0
+ output was was detected empty at testcase: tripleIt(0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 0
)

+ now we are writing the testcase function tripleIt(0) on the python file : 
+ current testcase :  tripleIt(1)=3
+ current function : tripleIt(1)
+ printout : print(tripleIt(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
)

+ now we are writing the testcase function tripleIt(1) on the python file : 
+ current testcase :  tripleIt(-1)=-3
+ current function : tripleIt(-1)
+ printout : print(tripleIt(-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
)

+ now we are writing the testcase function tripleIt(-1) on the python file : 
+ current testcase :  tripleIt(20)=60
+ current function : tripleIt(20)
+ printout : print(tripleIt(20))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
)

+ now we are writing the testcase function tripleIt(20) on the python file : 
+ current testcase :  tripleIt(-40)=-120
+ current function : tripleIt(-40)
+ printout : print(tripleIt(-40))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 0
    [1] => 3
    [2] => -3
    [3] => 60
    [4] => -120
)

+ now we are writing the testcase function tripleIt(-40) on the python file : 
+ running execom() with pars for id : 11, qId : 8
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def tripleIt(n): 
    return n*3
print(tripleIt(0))
print(tripleIt(1))
print(tripleIt(-1))
print(tripleIt(20))
print(tripleIt(-40))
+ funperc was set to :80, size: 5
+ sub : 0.16, max: 0.16
+execom() calculated funperc: 80, max: 0.16
substr failed at getOut()+execom() calculated funperc: 80, max: 0.16
+ status of exec was 0. program executed succesfully
+ comparing tripleIt(0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Called tripleIt(0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(0), expected: "0", got "0"
    [points] => 19
    [max] => 3
)

+ comparing tripleIt(1)=3 with output : 3
+ comparing c: 3 with output : 3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(1), expected: "3", got "3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Called tripleIt(1), expected: "3", got "3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(1), expected: "3", got "3"
    [points] => 19
    [max] => 3
)

+ comparing tripleIt(-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Called tripleIt(-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-1), expected: "-3", got "-3"
    [points] => 19
    [max] => 3
)

+ comparing tripleIt(20)=60 with output : 60
+ comparing c: 60 with output : 60
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(20), expected: "60", got "60"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Called tripleIt(20), expected: "60", got "60"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(20), expected: "60", got "60"
    [points] => 19
    [max] => 3
)

+ comparing tripleIt(-40)=-120 with output : -120
+ comparing c: -120 with output : -120
pass!
+ calling updatePoints() to provide feedback
+ np Called tripleIt(-40), expected: "-120", got "-120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np Called tripleIt(-40), expected: "-120", got "-120"
    [subpoints] => 0
    [max] => 0.16
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 19
    [max] => 3
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p Called tripleIt(-40), expected: "-120", got "-120"
    [points] => 19
    [max] => 3
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 8
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 8
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 19
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 8
    [feedback] => n-0p user program successfully executed
    [points] => 19
    [max] => 16
)

counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 08:50:26pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 28
    [max] => 2
)

+ checkCons() was succesful at test 11, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sud(a,b)    :
    return a-b
+ calling colonfixer(text); text: 
def sud(a,b)    :
    return a-b
+ trimming the whitespaces:  
def sud(a,b)    :
    return a-b
+ sanitize the text off characters. calling hiddencharkiller()
def sud(a,b)    : 
    return a-b
def sud(a,b)    : 
    return a-b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Colon after function signature
    [points] => 28
    [max] => 2
)

+ calling printkiller() for: def sud(a,b)    : 
    return a-b
+ printkiller()  is called with text: def sud(a,b)    : 
    return a-b
+ operating funcom for userAnswer: def sud(a,b)    : 
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sud(a,b)    : 
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sud(a,b)    : 
    return a-b
+ function was not found at all in the user answer
+ returning the correct function : sub
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => bp Expecting function: "sub", found "sud"
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => b-2p Expecting function: "sub", found "sud"
    [points] => 26
    [max] => 2
)

+ replacing def sud(a,b)    : 
    return a-b with sub
+ funrep() called, old answer: def sud(a,b)    : 
    return a-b
+ funrep() called, new answer: def sub(a,b)    : 
    return a-b
+ writing correct answer to python file: def sub(a,b)    : 
    return a-b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 11, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b)    : 
    return a-b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 26
    [max] => 12
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 26
    [max] => 12
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 26
    [max] => 12
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 26
    [max] => 12
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 26
    [max] => 12
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 26
    [max] => 24
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 26
    [max] => 24
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 4
+ clearning the python file for 4
+  page accessed by getCons 2019-05-06 08:50:27pm
+ received data : 
Array
(
    [qId] => 4
)

+ getCons() in backend  was succesful. data: 
{"cons":["while"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => while
)

+ getCons (4) success:
Array
(
    [0] => while
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find while in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => bp While loop was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => b-3p While loop was not found
    [points] => 47
    [max] => 3
)

+ checkCons() was succesful at test 11, qid 4
+ calling newlinekiller(text) just in case the student spams newline characters
def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
+ calling colonfixer(text); text: 
def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
+ trimming the whitespaces:  
def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
+ sanitize the text off characters. calling hiddencharkiller()
def factorial(n) 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ colon was not found in user answer
+ new answer: 
 def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => b-3p Colon not at end of function signature
    [points] => 44
    [max] => 3
)

+ calling printkiller() for: def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ printkiller()  is called with text: def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ operating funcom for userAnswer: def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ np obtained function factorial with funcom()
+ finding if factorial is in user answer def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np Expecting function: "factorial", found "factorial"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Expecting function: "factorial", found "factorial"
    [points] => 44
    [max] => 3
)

+ writing answer to python file: def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
+ current testcase :  factorial(2)=2
+ current function : factorial(2)
+ printout : print(factorial(2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
)

+ now we are writing the testcase function factorial(2) on the python file : 
+ current testcase :  factorial(5)=120
+ current function : factorial(5)
+ printout : print(factorial(5))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
)

+ now we are writing the testcase function factorial(5) on the python file : 
+ current testcase :  factorial(3)=6
+ current function : factorial(3)
+ printout : print(factorial(3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
    [2] => 6
)

+ now we are writing the testcase function factorial(3) on the python file : 
+ current testcase :  factorial(1)=1
+ current function : factorial(1)
+ printout : print(factorial(1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 2
    [1] => 120
    [2] => 6
    [3] => 1
)

+ now we are writing the testcase function factorial(1) on the python file : 
+ running execom() with pars for id : 11, qId : 4
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def factorial(n): 
    acc = 1 
    for i in range(1,n+1): 
        acc *= i 
    return acc
print(factorial(2))
print(factorial(5))
print(factorial(3))
print(factorial(1))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ status of exec was 0. program executed succesfully
+ comparing factorial(2)=2 with output : 2
+ comparing c: 2 with output : 2
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(2), expected: "2", got "2"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np Called factorial(2), expected: "2", got "2"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(2), expected: "2", got "2"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(2), expected: "2", got "2"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(2), expected: "2", got "2"
    [points] => 44
    [max] => 10
)

+ comparing factorial(5)=120 with output : 120
+ comparing c: 120 with output : 120
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(5), expected: "120", got "120"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np Called factorial(5), expected: "120", got "120"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(5), expected: "120", got "120"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(5), expected: "120", got "120"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(5), expected: "120", got "120"
    [points] => 44
    [max] => 10
)

+ comparing factorial(3)=6 with output : 6
+ comparing c: 6 with output : 6
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(3), expected: "6", got "6"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np Called factorial(3), expected: "6", got "6"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(3), expected: "6", got "6"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(3), expected: "6", got "6"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(3), expected: "6", got "6"
    [points] => 44
    [max] => 10
)

+ comparing factorial(1)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called factorial(1), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np Called factorial(1), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(1), expected: "1", got "1"
    [points] => 44
    [max] => 10
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p Called factorial(1), expected: "1", got "1"
    [points] => 44
    [max] => 10
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 11
    [qId] => 4
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 11 and qId = 4
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p user program successfully executed
    [points] => 44
    [max] => 40
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 11
    [qId] => 4
    [feedback] => n-0p user program successfully executed
    [points] => 44
    [max] => 40
)

[+] page accessed AUTOGRADER 2019-05-06 10:59:55pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 462191
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ called checkGrade for testId . 16
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 16
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 16 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 16
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 10
                            [desc] => Write a function called greet that takes two string parameters, a greeting and a name. The function should print out the greeting followed by a comma and then the name. For instance, if the greeting is "Hello!" and the name is "Bob" then the function should print "Hello!,Bob".
                            [topic] => String
                            [diff] => 2
                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [diff] => 4
                        )

                    [3] => Array
                        (
                            [id] => 8
                            [desc] => Write a function called tripleIt that takes one integer parameter and returns that number times three. Must use a for loop.
                            [topic] => Math
                            [diff] => 2
                        )

                    [4] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 10
            [1] => 2
            [2] => 4
            [3] => 8
            [4] => 5
        )

    [testId] => 16
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 10
                    [text] => def greet(a, b):
    ans = a + "," + b
    print(ans)
                    [tests] => Array
                        (
                            [0] => greet("Hello!", "Bob")=Hello!,Bob
                            [1] => greet("a", "b")=a,b
                            [2] => greet("Good'ay", "sir.")=Good'ay,sir.
                            [3] => greet("Mornin", "Jill")=Mornin,Jill
                        )

                )

            [1] => Array
                (
                    [qId] => 2
                    [text] => def strMult(s, n)
    print(s*n)
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [qId] => 4
                    [text] => def factorial(n)
    acc = 1
    for i in range(1, n+1):
        acc *= i
    print acc    
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [3] => Array
                (
                    [qId] => 8
                    [text] => def tripDat(n)                                :
    return n+n+n
                    [tests] => Array
                        (
                            [0] => tripleIt(0)=0
                            [1] => tripleIt(1)=3
                            [2] => tripleIt(-1)=-3
                            [3] => tripleIt(20)=60
                            [4] => tripleIt(-40)=-120
                        )

                )

            [4] => Array
                (
                    [qId] => 5
                    [text] => def sup(a,b)
    if a-b > 0:
        return a-b
    else
        return b-a
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 10
            [text] => def greet(a, b):
    ans = a + "," + b
    print(ans)
            [tests] => Array
                (
                    [0] => greet("Hello!", "Bob")=Hello!,Bob
                    [1] => greet("a", "b")=a,b
                    [2] => greet("Good'ay", "sir.")=Good'ay,sir.
                    [3] => greet("Mornin", "Jill")=Mornin,Jill
                )

        )

    [1] => Array
        (
            [qId] => 2
            [text] => def strMult(s, n)
    print(s*n)
            [tests] => Array
                (
                    [0] => strMult("hello",1)=hello
                    [1] => strMult("up", 4)=upupupup
                    [2] => strMult("hey", 3)=heyheyhey
                    [3] => strMult("aba", 2)=abaaba
                )

        )

    [2] => Array
        (
            [qId] => 4
            [text] => def factorial(n)
    acc = 1
    for i in range(1, n+1):
        acc *= i
    print acc    
            [tests] => Array
                (
                    [0] => factorial(2)=2
                    [1] => factorial(5)=120
                    [2] => factorial(3)=6
                    [3] => factorial(1)=1
                )

        )

    [3] => Array
        (
            [qId] => 8
            [text] => def tripDat(n)                                :
    return n+n+n
            [tests] => Array
                (
                    [0] => tripleIt(0)=0
                    [1] => tripleIt(1)=3
                    [2] => tripleIt(-1)=-3
                    [3] => tripleIt(20)=60
                    [4] => tripleIt(-40)=-120
                )

        )

    [4] => Array
        (
            [qId] => 5
            [text] => def sup(a,b)
    if a-b > 0:
        return a-b
    else
        return b-a
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 10
+ clearning the python file for 10
+  page accessed by getCons 2019-05-06 10:59:58pm
+ received data : 
Array
(
    [qId] => 10
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (10) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() found print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np print was found.
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p print was found.
    [points] => 20
    [max] => 1
)

+ checkCons() was succesful at test 16, qid 10
+ calling newlinekiller(text) just in case the student spams newline characters
def greet(a, b):
    ans = a + "," + b
    print(ans)
+ calling colonfixer(text); text: 
def greet(a, b):
    ans = a + "," + b
    print(ans)
+ trimming the whitespaces:  
def greet(a, b):
    ans = a + "," + b
    print(ans)
+ sanitize the text off characters. calling hiddencharkiller()
def greet(a, b): 
    ans = a + "," + b 
    print(ans)
def greet(a, b): 
    ans = a + "," + b 
    print(ans)
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Colon after function signature
    [points] => 20
    [max] => 1
)

+ calling printkiller() for: def greet(a, b): 
    ans = a + "," + b 
    print(ans)
+ printkiller()  is called with text: def greet(a, b): 
    ans = a + "," + b 
    print(ans)
+ printkiller() out: def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ printkiller() done: 
def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ operating funcom for userAnswer: def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ np obtained function greet with funcom()
+ finding if greet is in user answer def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ np obtained function greet with funcom()
+ finding if greet is in user answer def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ np obtained function greet with funcom()
+ finding if greet is in user answer def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ np obtained function greet with funcom()
+ finding if greet is in user answer def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np Expecting function: "greet", found "greet"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Expecting function: "greet", found "greet"
    [points] => 20
    [max] => 1
)

+ writing answer to python file: def greet(a, b): 
    ans = a + "," + b 
    return(ans)
+ current testcase :  greet("Hello!", "Bob")=Hello!,Bob
+ current function : greet("Hello!", "Bob")
+ printout : print(greet("Hello!", "Bob"))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => Hello!,Bob
)

+ now we are writing the testcase function greet("Hello!", "Bob") on the python file : 
+ current testcase :  greet("a", "b")=a,b
+ current function : greet("a", "b")
+ printout : print(greet("a", "b"))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => Hello!,Bob
    [1] => a,b
)

+ now we are writing the testcase function greet("a", "b") on the python file : 
+ current testcase :  greet("Good'ay", "sir.")=Good'ay,sir.
+ current function : greet("Good'ay", "sir.")
+ printout : print(greet("Good'ay", "sir."))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => Hello!,Bob
    [1] => a,b
    [2] => Good'ay,sir.
)

+ now we are writing the testcase function greet("Good'ay", "sir.") on the python file : 
+ current testcase :  greet("Mornin", "Jill")=Mornin,Jill
+ current function : greet("Mornin", "Jill")
+ printout : print(greet("Mornin", "Jill"))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => Hello!,Bob
    [1] => a,b
    [2] => Good'ay,sir.
    [3] => Mornin,Jill
)

+ now we are writing the testcase function greet("Mornin", "Jill") on the python file : 
+ running execom() with pars for id : 16, qId : 10
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def greet(a, b): 
    ans = a + "," + b 
    return(ans)
print(greet("Hello!", "Bob"))
print(greet("a", "b"))
print(greet("Good'ay", "sir."))
print(greet("Mornin", "Jill"))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ status of exec was 0. program executed succesfully
+ comparing greet("Hello!", "Bob")=Hello!,Bob with output : Hello!,Bob
+ comparing c: Hello!,Bob with output : Hello!,Bob
pass!
+ calling updatePoints() to provide feedback
+ np Called greet("Hello!", "Bob"), expected: "Hello!,Bob", got "Hello!,Bob"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np Called greet("Hello!", "Bob"), expected: "Hello!,Bob", got "Hello!,Bob"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Hello!", "Bob"), expected: "Hello!,Bob", got "Hello!,Bob"
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Hello!", "Bob"), expected: "Hello!,Bob", got "Hello!,Bob"
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Hello!", "Bob"), expected: "Hello!,Bob", got "Hello!,Bob"
    [points] => 20
    [max] => 4
)

+ comparing greet("a", "b")=a,b with output : a,b
+ comparing c: a,b with output : a,b
pass!
+ calling updatePoints() to provide feedback
+ np Called greet("a", "b"), expected: "a,b", got "a,b"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np Called greet("a", "b"), expected: "a,b", got "a,b"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("a", "b"), expected: "a,b", got "a,b"
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("a", "b"), expected: "a,b", got "a,b"
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("a", "b"), expected: "a,b", got "a,b"
    [points] => 20
    [max] => 4
)

+ comparing greet("Good'ay", "sir.")=Good'ay,sir. with output : Good'ay,sir.
+ comparing c: Good'ay,sir. with output : Good'ay,sir.
pass!
+ calling updatePoints() to provide feedback
+ np Called greet("Good'ay", "sir."), expected: "Good'ay,sir.", got "Good'ay,sir."
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np Called greet("Good'ay", "sir."), expected: "Good'ay,sir.", got "Good'ay,sir."
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Good'ay", "sir."), expected: "Good'ay,sir.", got "Good'ay,sir."
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Good'ay", "sir."), expected: "Good'ay,sir.", got "Good'ay,sir."
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Good'ay", "sir."), expected: "Good'ay,sir.", got "Good'ay,sir."
    [points] => 20
    [max] => 4
)

+ comparing greet("Mornin", "Jill")=Mornin,Jill with output : Mornin,Jill
+ comparing c: Mornin,Jill with output : Mornin,Jill
pass!
+ calling updatePoints() to provide feedback
+ np Called greet("Mornin", "Jill"), expected: "Mornin,Jill", got "Mornin,Jill"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np Called greet("Mornin", "Jill"), expected: "Mornin,Jill", got "Mornin,Jill"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Mornin", "Jill"), expected: "Mornin,Jill", got "Mornin,Jill"
    [points] => 20
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p Called greet("Mornin", "Jill"), expected: "Mornin,Jill", got "Mornin,Jill"
    [points] => 20
    [max] => 4
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 10
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 10
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p user program successfully executed
    [points] => 20
    [max] => 16
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 10
    [feedback] => n-0p user program successfully executed
    [points] => 20
    [max] => 16
)

counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 2
+ clearning the python file for 2
+  page accessed by getCons 2019-05-06 11:00:00pm
+ received data : 
Array
(
    [qId] => 2
)

+ getCons() in backend  was succesful. data: 
{"cons":["for","print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => for
    [1] => print
)

+ getCons (2) success:
Array
(
    [0] => for
    [1] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find for in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => bp For loop was not found
    [subpoints] => 0.033
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => b-1p For loop was not found
    [points] => 19
    [max] => 1
)

+ checkCons() found print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => np print was found.
    [subpoints] => 0
    [max] => 0.033
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p print was found.
    [points] => 19
    [max] => 1
)

+ checkCons() was succesful at test 16, qid 2
+ calling newlinekiller(text) just in case the student spams newline characters
def strMult(s, n)
    print(s*n)
+ calling colonfixer(text); text: 
def strMult(s, n)
    print(s*n)
+ trimming the whitespaces:  
def strMult(s, n)
    print(s*n)
+ sanitize the text off characters. calling hiddencharkiller()
def strMult(s, n) 
    print(s*n)
+ colon was not found in user answer
+ new answer: 
 def strMult(s, n): 
    print(s*n)
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => b-1p Colon not at end of function signature
    [points] => 18
    [max] => 1
)

+ calling printkiller() for: def strMult(s, n): 
    print(s*n)
+ printkiller()  is called with text: def strMult(s, n): 
    print(s*n)
+ printkiller() out: def strMult(s, n): 
    return(s*n)
+ printkiller() done: 
def strMult(s, n): 
    return(s*n)
+ operating funcom for userAnswer: def strMult(s, n): 
    return(s*n)
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return(s*n)
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return(s*n)
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return(s*n)
+ np obtained function strMult with funcom()
+ finding if strMult is in user answer def strMult(s, n): 
    return(s*n)
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => np Expecting function: "strMult", found "strMult"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Expecting function: "strMult", found "strMult"
    [points] => 18
    [max] => 1
)

+ writing answer to python file: def strMult(s, n): 
    return(s*n)
+ current testcase :  strMult("hello",1)=hello
+ current function : strMult("hello",1)
+ printout : print(strMult("hello",1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
)

+ now we are writing the testcase function strMult("hello",1) on the python file : 
+ current testcase :  strMult("up", 4)=upupupup
+ current function : strMult("up", 4)
+ printout : print(strMult("up", 4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
)

+ now we are writing the testcase function strMult("up", 4) on the python file : 
+ current testcase :  strMult("hey", 3)=heyheyhey
+ current function : strMult("hey", 3)
+ printout : print(strMult("hey", 3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
)

+ now we are writing the testcase function strMult("hey", 3) on the python file : 
+ current testcase :  strMult("aba", 2)=abaaba
+ current function : strMult("aba", 2)
+ printout : print(strMult("aba", 2))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => hello
    [1] => upupupup
    [2] => heyheyhey
    [3] => abaaba
)

+ now we are writing the testcase function strMult("aba", 2) on the python file : 
+ running execom() with pars for id : 16, qId : 2
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def strMult(s, n): 
    return(s*n)
print(strMult("hello",1))
print(strMult("up", 4))
print(strMult("hey", 3))
print(strMult("aba", 2))
+ funperc was set to :80, size: 4
+ sub : 0.2, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+execom() calculated funperc: 80, max: 0.2
+ status of exec was 0. program executed succesfully
+ comparing strMult("hello",1)=hello with output : hello
+ comparing c: hello with output : hello
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("hello",1), expected: "hello", got "hello"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => np Called strMult("hello",1), expected: "hello", got "hello"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 18
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 18
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("hello",1), expected: "hello", got "hello"
    [points] => 18
    [max] => 4
)

+ comparing strMult("up", 4)=upupupup with output : upupupup
+ comparing c: upupupup with output : upupupup
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("up", 4), expected: "upupupup", got "upupupup"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => np Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 18
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 18
    [max] => 4
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("up", 4), expected: "upupupup", got "upupupup"
    [points] => 18
    [max] => 4
)

+ comparing strMult("hey", 3)=heyheyhey with output : heyheyhey
+ comparing c: heyheyhey with output : heyheyhey
pass!
+ calling updatePoints() to provide feedback
+ np Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 16
    [qId] => 2
    [feedback] => np Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [subpoints] => 0
    [max] => 0.2
)

+ modA was able to retrieve all rows from feedback for testId = 16 and qId = 2
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 16
    [qId] => 2
    [feedback] => n-0p Called strMult("hey", 3), expected: "heyheyhey", got "heyheyhey"
    [points] => 18
    [max] => 4
)

[+] page accessed AUTOGRADER 2019-05-06 11:11:45pm
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 492486
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ called checkGrade for testId . 16
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 16
+ called checkGrade for testId . 17
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 17
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 17 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 17
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 3
            [1] => 5
            [2] => 1
        )

    [testId] => 17
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a,b,c)
    return a+b+c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def suv(a,b)
    if (1+1 == 2):
        return a-b
    else:
        return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 1
                    [text] => def operatio(op, a, b):
    if op == "+":
        return a+b
    if op == "-":
        return a-b
    if op == "*":
        return a*b
    if op == "/":
        return a/b

                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 3
            [text] => def addThree(a,b,c)
    return a+b+c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def suv(a,b)
    if (1+1 == 2):
        return a-b
    else:
        return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 1
            [text] => def operatio(op, a, b):
    if op == "+":
        return a+b
    if op == "-":
        return a-b
    if op == "*":
        return a*b
    if op == "/":
        return a/b

            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-06 11:11:47pm
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a,b,c)
    return a+b+c
+ calling colonfixer(text); text: 
def addThree(a,b,c)
    return a+b+c
+ trimming the whitespaces:  
def addThree(a,b,c)
    return a+b+c
+ sanitize the text off characters. calling hiddencharkiller()
def addThree(a,b,c) 
    return a+b+c
+ colon was not found in user answer
+ new answer: 
 def addThree(a,b,c): 
    return a+b+c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => b-4p Colon not at end of function signature
    [points] => 31
    [max] => 4
)

+ calling printkiller() for: def addThree(a,b,c): 
    return a+b+c
+ printkiller()  is called with text: def addThree(a,b,c): 
    return a+b+c
+ operating funcom for userAnswer: def addThree(a,b,c): 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a,b,c): 
    return a+b+c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 31
    [max] => 4
)

+ writing answer to python file: def addThree(a,b,c): 
    return a+b+c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 17, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a,b,c): 
    return a+b+c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ status of exec was 0. program executed succesfully
+ comparing addThree(100, 200, 300)=600 with output : 600
+ comparing c: 600 with output : 600
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(100, 200, 300), expected: "600", got "600"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Called addThree(100, 200, 300), expected: "600", got "600"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(100, 200, 300), expected: "600", got "600"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(100, 200, 300), expected: "600", got "600"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(100, 200, 300), expected: "600", got "600"
    [points] => 31
    [max] => 5
)

+ comparing addThree(-7, 0, 19)=12 with output : 12
+ comparing c: 12 with output : 12
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(-7, 0, 19), expected: "12", got "12"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Called addThree(-7, 0, 19), expected: "12", got "12"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(-7, 0, 19), expected: "12", got "12"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(-7, 0, 19), expected: "12", got "12"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(-7, 0, 19), expected: "12", got "12"
    [points] => 31
    [max] => 5
)

+ comparing addThree(-1,-1,-1)=-3 with output : -3
+ comparing c: -3 with output : -3
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(-1,-1,-1), expected: "-3", got "-3"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(-1,-1,-1), expected: "-3", got "-3"
    [points] => 31
    [max] => 5
)

+ comparing addThree(1,2,3)=6 with output : 6
+ comparing c: 6 with output : 6
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(1,2,3), expected: "6", got "6"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Called addThree(1,2,3), expected: "6", got "6"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(1,2,3), expected: "6", got "6"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(1,2,3), expected: "6", got "6"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(1,2,3), expected: "6", got "6"
    [points] => 31
    [max] => 5
)

+ comparing addThree(4,5,6)=15 with output : 15
+ comparing c: 15 with output : 15
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(4,5,6), expected: "15", got "15"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Called addThree(4,5,6), expected: "15", got "15"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 6 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(4,5,6), expected: "15", got "15"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(4,5,6), expected: "15", got "15"
    [points] => 31
    [max] => 5
)

substr failed at getOut()+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(4,5,6), expected: "15", got "15"
    [points] => 31
    [max] => 5
)

+ comparing addThree(0,0,0)=0 with output : 0
+ comparing c: 0 with output : 0
pass!
+ calling updatePoints() to provide feedback
+ np Called addThree(0,0,0), expected: "0", got "0"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np Called addThree(0,0,0), expected: "0", got "0"
    [subpoints] => 0
    [max] => 0.13333333333333
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 7 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(0,0,0), expected: "0", got "0"
    [points] => 31
    [max] => 5
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p Called addThree(0,0,0), expected: "0", got "0"
    [points] => 31
    [max] => 5
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 3
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 3
+ obtained 8 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p user program successfully executed
    [points] => 31
    [max] => 28
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 3
    [feedback] => n-0p user program successfully executed
    [points] => 31
    [max] => 28
)

counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-06 11:11:50pm
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 33
    [max] => 2
)

+ checkCons() was succesful at test 17, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def suv(a,b)
    if (1+1 == 2):
        return a-b
    else:
        return a-b
+ calling colonfixer(text); text: 
def suv(a,b)
    if (1+1 == 2):
        return a-b
    else:
        return a-b
+ trimming the whitespaces:  
def suv(a,b)
    if (1+1 == 2):
        return a-b
    else:
        return a-b
+ sanitize the text off characters. calling hiddencharkiller()
def suv(a,b) 
    if (1+1 == 2): 
        return a-b 
    else: 
        return a-b
+ colon was not found in user answer
+ new answer: 
 def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 5
    [feedback] => b-2p Colon not at end of function signature
    [points] => 31
    [max] => 2
)

+ calling printkiller() for: def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ printkiller()  is called with text: def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ operating funcom for userAnswer: def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ function was not found at all in the user answer
+ returning the correct function : sub
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 5
    [feedback] => bp Expecting function: "sub", found "suv"
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 5
    [feedback] => b-2p Expecting function: "sub", found "suv"
    [points] => 29
    [max] => 2
)

+ replacing def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b with sub
+ funrep() called, old answer: def suv(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ funrep() called, new answer: def sub(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ writing correct answer to python file: def sub(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 17, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a,b): 
    if (1+1 == 2)  
        return a-b 
    else  
        return a-b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 3
if (1+1 == 2)
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 5
    [feedback] => bp Code failed to execute: line 3
if (1+1 == 2)
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 5
    [feedback] => b-28p Code failed to execute: line 3
if (1+1 == 2)
SyntaxError: invalid syntax

    [points] => 1
    [max] => 28
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 5
    [feedback] => b-28p Code failed to execute: line 3
if (1+1 == 2)
SyntaxError: invalid syntax

    [points] => 1
    [max] => 28
)

+ execom failed. pls check logs. 
counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-06 11:11:51pm
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operatio(op, a, b):
    if op == "+":
        return a+b
    if op == "-":
        return a-b
    if op == "*":
        return a*b
    if op == "/":
        return a/b
+ calling colonfixer(text); text: 
def operatio(op, a, b):
    if op == "+":
        return a+b
    if op == "-":
        return a-b
    if op == "*":
        return a*b
    if op == "/":
        return a/b
+ trimming the whitespaces:  
def operatio(op, a, b):
    if op == "+":
        return a+b
    if op == "-":
        return a-b
    if op == "*":
        return a*b
    if op == "/":
        return a/b
+ sanitize the text off characters. calling hiddencharkiller()
def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 1
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 1
    [feedback] => n-0p Colon after function signature
    [points] => 30
    [max] => 3
)

+ calling printkiller() for: def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ printkiller()  is called with text: def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ operating funcom for userAnswer: def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 30
    [max] => 3
)

+ writing answer to python file: def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 17, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operatio(op, a, b): 
    if op == "+": 
        return a+b 
    if op == "-": 
        return a-b 
    if op == "*": 
        return a*b 
    if op == "/": 
        return a/b
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 11, in <module>
NameError: name 'operation' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 17
    [qId] => 1
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 11, in <module>
NameError: name 'operation' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 17 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 1
    [feedback] => b-24p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 11, in <module>
NameError: name 'operation' is not defined

    [points] => 6
    [max] => 24
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 17
    [qId] => 1
    [feedback] => b-24p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 11, in <module>
NameError: name 'operation' is not defined

    [points] => 6
    [max] => 24
)

+ execom failed. pls check logs. 
+ holecheck was succesful; obtained curlop out:
{"type":"modA","error":"modA remarks object is empty. modA grades is empty. modA feedbacks is empty. ","attempt":{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation(\"?\",3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["12","112"],"feedback":[["g12p Colon after function signature","b-12p Expecting function: \"operation\", found \"opernoob\"","b-96p Code failed to execute: line 14return a?bSyntaxError: invalid syntax"],["b-4p For loop was not found","b-4p  Print was not found","g8p Colon after function signature","g8p Expecting function: \"strMult\", found \"strMult\"","g24p Called strMult(\"hello\",1), expected: \"hello\", got \"hello\"","g24p Called strMult(\"up\", 4), expected: \"upupupup\", got \"upupupup\"","g24p Called strMult(\"hey\", 3), expected: \"heyheyhey\", got \"heyheyhey\"","g24p Called strMult(\"aba\", 2), expected: \"abaaba\", got \"abaaba\"","n-0p user program successfully executed"]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"}}
[+] page accessed AUTOGRADER 2019-05-07 06:17:05am
********************************************************

+ target file size of : /afs/cad/u/w/b/wbv4/public_html/Middle/tracklogs/auto.txt = 531432
+ called checkGrade for testId . 1
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 1
+ called checkGrade for testId . 2
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 2
+ called checkGrade for testId . 4
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 4
+ called checkGrade for testId . 5
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 5
+ called checkGrade for testId . 6
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 6
+ called checkGrade for testId . 7
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 7
+ called checkGrade for testId . 8
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 8
+ called checkGrade for testId . 9
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 9
+ called checkGrade for testId . 10
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 10
+ called checkGrade for testId . 11
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 11
+ called checkGrade for testId . 12
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 12
+ called checkGrade for testId . 13
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 13
+ called checkGrade for testId . 14
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 14
+ called checkGrade for testId . 15
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 15
+ called checkGrade for testId . 16
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 16
+ called checkGrade for testId . 17
+ checkGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ checkGrade returned true . skipping 17
+ called checkGrade for testId . 18
+ checkGrade() returned : 
Array
(
    [grade] => 0
    [error] => 
)

+ called setGrade for testId 18
+setGrade() returned : 
Array
(
    [grade] => 1
    [error] => 
)

+ 18 will now be graded.
+ an array of submittedTests: 
Array
(
    [0] => Array
        (
            [id] => 18
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                        )

                    [1] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                        )

                    [2] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [diff] => 1
                        )

                )

        )

)

+ proceed with task B: obtain test cases
+ obtaining the array of ques from subm. tests
+ sending paramaters to getAnswers() :
Array
(
    [type] => autograder
    [qIds] => Array
        (
            [0] => 1
            [1] => 5
            [2] => 3
        )

    [testId] => 18
)

+ getAnswers(bullet2) output and formed the arrayofAnswers: 
Array
(
    [type] => getAnswers
    [error] => 0
    [answers] => Array
        (
            [0] => Array
                (
                    [qId] => 1
                    [text] => def operatio(op, a, b):
    if op == '+':
        return a+b
    elif op == '*':
        return a*b
    else:
        return 'error'
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation("?",3,3)=error
                        )

                )

            [1] => Array
                (
                    [qId] => 5
                    [text] => def sub(a, b)
    return a-b
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [qId] => 3
                    [text] => def addThree(a, b, c)
    if 1 == 1:
        return a+b+c
    else:
        return a+b+c
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

)

Array
(
    [0] => Array
        (
            [qId] => 1
            [text] => def operatio(op, a, b):
    if op == '+':
        return a+b
    elif op == '*':
        return a*b
    else:
        return 'error'
            [tests] => Array
                (
                    [0] => operation('+',3,3)=6
                    [1] => operation('-',3,3)=0
                    [2] => operation('/',3,3)=1
                    [3] => operation('*',3,3)=9
                    [4] => operation('%',3,3)=0
                    [5] => operation("?",3,3)=error
                )

        )

    [1] => Array
        (
            [qId] => 5
            [text] => def sub(a, b)
    return a-b
            [tests] => Array
                (
                    [0] => sub(3,4)=-1
                    [1] => sub(4,3)=1
                )

        )

    [2] => Array
        (
            [qId] => 3
            [text] => def addThree(a, b, c)
    if 1 == 1:
        return a+b+c
    else:
        return a+b+c
            [tests] => Array
                (
                    [0] => addThree(100, 200, 300)=600
                    [1] => addThree(-7, 0, 19)=12
                    [2] => addThree(-1,-1,-1)=-3
                    [3] => addThree(1,2,3)=6
                    [4] => addThree(4,5,6)=15
                    [5] => addThree(0,0,0)=0
                )

        )

)
counter is 1
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 1
+ clearning the python file for 1
+  page accessed by getCons 2019-05-07 06:17:38am
+ received data : 
Array
(
    [qId] => 1
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(1) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def operatio(op, a, b):
    if op == '+':
        return a+b
    elif op == '*':
        return a*b
    else:
        return 'error'
+ calling colonfixer(text); text: 
def operatio(op, a, b):
    if op == '+':
        return a+b
    elif op == '*':
        return a*b
    else:
        return 'error'
+ trimming the whitespaces:  
def operatio(op, a, b):
    if op == '+':
        return a+b
    elif op == '*':
        return a*b
    else:
        return 'error'
+ sanitize the text off characters. calling hiddencharkiller()
def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 1
    [feedback] => np Colon after function signature
    [subpoints] => 0
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 1
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 1
    [feedback] => n-0p Colon after function signature
    [points] => 15
    [max] => 2
)

+ calling printkiller() for: def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ printkiller()  is called with text: def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ operating funcom for userAnswer: def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ np obtained function operation with funcom()
+ finding if operation is in user answer def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 1
    [feedback] => np Expecting function: "operation", found "operation"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 1
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 1
    [feedback] => n-0p Expecting function: "operation", found "operation"
    [points] => 15
    [max] => 2
)

+ writing answer to python file: def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
+ current testcase :  operation('+',3,3)=6
+ current function : operation('+',3,3)
+ printout : print(operation('+',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
)

+ now we are writing the testcase function operation('+',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('-',3,3)=0
+ output was was detected empty at testcase: operation('-',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
)

+ now we are writing the testcase function operation('-',3,3) on the python file : 
+ current testcase :  operation('/',3,3)=1
+ current function : operation('/',3,3)
+ printout : print(operation('/',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
)

+ now we are writing the testcase function operation('/',3,3) on the python file : 
+ current testcase :  operation('*',3,3)=9
+ current function : operation('*',3,3)
+ printout : print(operation('*',3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
)

+ now we are writing the testcase function operation('*',3,3) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: operation('%',3,3)=0
+ output was was detected empty at testcase: operation('%',3,3)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
)

+ now we are writing the testcase function operation('%',3,3) on the python file : 
+ current testcase :  operation("?",3,3)=error
+ current function : operation("?",3,3)
+ printout : print(operation("?",3,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 6
    [1] => 0
    [2] => 1
    [3] => 9
    [4] => 0
    [5] => error
)

+ now we are writing the testcase function operation("?",3,3) on the python file : 
+ running execom() with pars for id : 18, qId : 1
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def operatio(op, a, b): 
    if op == '+': 
        return a+b 
    elif op == '*': 
        return a*b 
    else: 
        return 'error'
print(operation('+',3,3))
print(operation('-',3,3))
print(operation('/',3,3))
print(operation('*',3,3))
print(operation('%',3,3))
print(operation("?",3,3))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 9, in <module>
NameError: name 'operation' is not defined

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 1
    [feedback] => bp Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 9, in <module>
NameError: name 'operation' is not defined

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 1
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 1
    [feedback] => b-12p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 9, in <module>
NameError: name 'operation' is not defined

    [points] => 3
    [max] => 12
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 1
    [feedback] => b-12p Code failed to execute:raceback (most recent call last):
File "/afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py", line 9, in <module>
NameError: name 'operation' is not defined

    [points] => 3
    [max] => 12
)

+ execom failed. pls check logs. 
counter is 2
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 5
+ clearning the python file for 5
+  page accessed by getCons 2019-05-07 06:17:39am
+ received data : 
Array
(
    [qId] => 5
)

+ getCons() in backend  was succesful. data: 
{"cons":["print"]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
    [0] => print
)

+ getCons (5) success:
Array
(
    [0] => print
)

+ checkCons() is checking if constraints are found in user answer
+ checkCons() did not find print in user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 5
    [feedback] => bp  Print was not found
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 5
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => b-2p  Print was not found
    [points] => 33
    [max] => 2
)

+ checkCons() was succesful at test 18, qid 5
+ calling newlinekiller(text) just in case the student spams newline characters
def sub(a, b)
    return a-b
+ calling colonfixer(text); text: 
def sub(a, b)
    return a-b
+ trimming the whitespaces:  
def sub(a, b)
    return a-b
+ sanitize the text off characters. calling hiddencharkiller()
def sub(a, b) 
    return a-b
+ colon was not found in user answer
+ new answer: 
 def sub(a, b): 
    return a-b
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 5
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.066
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 5
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => b-2p Colon not at end of function signature
    [points] => 31
    [max] => 2
)

+ calling printkiller() for: def sub(a, b): 
    return a-b
+ printkiller()  is called with text: def sub(a, b): 
    return a-b
+ operating funcom for userAnswer: def sub(a, b): 
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a, b): 
    return a-b
+ np obtained function sub with funcom()
+ finding if sub is in user answer def sub(a, b): 
    return a-b
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 5
    [feedback] => np Expecting function: "sub", found "sub"
    [subpoints] => 0
    [max] => 0.066
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 5
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p Expecting function: "sub", found "sub"
    [points] => 31
    [max] => 2
)

+ writing answer to python file: def sub(a, b): 
    return a-b
+ current testcase :  sub(3,4)=-1
+ current function : sub(3,4)
+ printout : print(sub(3,4))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
)

+ now we are writing the testcase function sub(3,4) on the python file : 
+ current testcase :  sub(4,3)=1
+ current function : sub(4,3)
+ printout : print(sub(4,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => -1
    [1] => 1
)

+ now we are writing the testcase function sub(4,3) on the python file : 
+ running execom() with pars for id : 18, qId : 5
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def sub(a, b): 
    return a-b
print(sub(3,4))
print(sub(4,3))
+ funperc was set to :80, size: 2
+ sub : 0.4, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+execom() calculated funperc: 80, max: 0.4
+ status of exec was 0. program executed succesfully
+ comparing sub(3,4)=-1 with output : -1
+ comparing c: -1 with output : -1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(3,4), expected: "-1", got "-1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 5
    [feedback] => np Called sub(3,4), expected: "-1", got "-1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 5
+ obtained 3 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 31
    [max] => 14
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 31
    [max] => 14
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p Called sub(3,4), expected: "-1", got "-1"
    [points] => 31
    [max] => 14
)

+ comparing sub(4,3)=1 with output : 1
+ comparing c: 1 with output : 1
pass!
+ calling updatePoints() to provide feedback
+ np Called sub(4,3), expected: "1", got "1"
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 5
    [feedback] => np Called sub(4,3), expected: "1", got "1"
    [subpoints] => 0
    [max] => 0.4
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 5
+ obtained 4 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 31
    [max] => 14
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p Called sub(4,3), expected: "1", got "1"
    [points] => 31
    [max] => 14
)

+ execom() returned 1
+ execom was succesful. updatePoints() feedback
+ np user program successfully executed
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 5
    [feedback] => np user program successfully executed
    [subpoints] => 0
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 5
+ obtained 5 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 31
    [max] => 28
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 5
    [feedback] => n-0p user program successfully executed
    [points] => 31
    [max] => 28
)

counter is 3
+ TASK F is in session. checking function name and colon 
+ clearning the python file for 3
+ clearning the python file for 3
+  page accessed by getCons 2019-05-07 06:19:01am
+ received data : 
Array
(
    [qId] => 3
)

+ getCons() in backend  was succesful. data: 
{"cons":[]}
+ gunCons() retrieving array of cons
+ array of cons: 
Array
(
)

+ getCons() has empty cons array. returning 0.
+ getCons(3) failed. cons returned empty.  
+ calling newlinekiller(text) just in case the student spams newline characters
def addThree(a, b, c)
    if 1 == 1:
        return a+b+c
    else:
        return a+b+c
+ calling colonfixer(text); text: 
def addThree(a, b, c)
    if 1 == 1:
        return a+b+c
    else:
        return a+b+c
+ trimming the whitespaces:  
def addThree(a, b, c)
    if 1 == 1:
        return a+b+c
    else:
        return a+b+c
+ sanitize the text off characters. calling hiddencharkiller()
def addThree(a, b, c) 
    if 1 == 1: 
        return a+b+c 
    else: 
        return a+b+c
+ colon was not found in user answer
+ new answer: 
 def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 3
    [feedback] => bp Colon not at end of function signature
    [subpoints] => 0.10
    [max] => 0.10
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 3
+ obtained 0 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 3
    [feedback] => b-5p Colon not at end of function signature
    [points] => 45
    [max] => 5
)

+ calling printkiller() for: def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ printkiller()  is called with text: def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ operating funcom for userAnswer: def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ np obtained function addThree with funcom()
+ finding if addThree is in user answer def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ the function was found in the user answer
+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 3
    [feedback] => np Expecting function: "addThree", found "addThree"
    [subpoints] => 0
    [max] => 0.1
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 3
+ obtained 1 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 3
    [feedback] => n-0p Expecting function: "addThree", found "addThree"
    [points] => 45
    [max] => 5
)

+ writing answer to python file: def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
+ current testcase :  addThree(100, 200, 300)=600
+ current function : addThree(100, 200, 300)
+ printout : print(addThree(100, 200, 300))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
)

+ now we are writing the testcase function addThree(100, 200, 300) on the python file : 
+ current testcase :  addThree(-7, 0, 19)=12
+ current function : addThree(-7, 0, 19)
+ printout : print(addThree(-7, 0, 19))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
)

+ now we are writing the testcase function addThree(-7, 0, 19) on the python file : 
+ current testcase :  addThree(-1,-1,-1)=-3
+ current function : addThree(-1,-1,-1)
+ printout : print(addThree(-1,-1,-1))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
)

+ now we are writing the testcase function addThree(-1,-1,-1) on the python file : 
+ current testcase :  addThree(1,2,3)=6
+ current function : addThree(1,2,3)
+ printout : print(addThree(1,2,3))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
)

+ now we are writing the testcase function addThree(1,2,3) on the python file : 
+ current testcase :  addThree(4,5,6)=15
+ current function : addThree(4,5,6)
+ printout : print(addThree(4,5,6))
+ obtaining the output part to be compared later.  
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
)

+ now we are writing the testcase function addThree(4,5,6) on the python file : 
substr failed at getOut()+ output was was detected empty at testcase: addThree(0,0,0)=0
+ output was was detected empty at testcase: addThree(0,0,0)=0
+ formed the arrayofOuts : 
Array
(
    [0] => 600
    [1] => 12
    [2] => -3
    [3] => 6
    [4] => 15
    [5] => 0
)

+ now we are writing the testcase function addThree(0,0,0) on the python file : 
+ running execom() with pars for id : 18, qId : 3
+ execom command: python /afs/cad/u/w/b/wbv4/public_html/Middle/firstpy.py 2>&1
+ python contents:

def addThree(a, b, c): 
    if 1 == 1  
        return a+b+c 
    else  
        return a+b+c
print(addThree(100, 200, 300))
print(addThree(-7, 0, 19))
print(addThree(-1,-1,-1))
print(addThree(1,2,3))
print(addThree(4,5,6))
print(addThree(0,0,0))
+ funperc was set to :80, size: 6
+ sub : 0.13333333333333, max: 0.13333333333333
+execom() calculated funperc: 80, max: 0.13333333333333
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ exec() failed.status returned 1. function did not match testcase or program syntax errors	
+ calling updatePoints() to provide stack trace for function fail. 
+ TASK HOTEL...
+ bp Code failed to execute: line 3
if 1 == 1
SyntaxError: invalid syntax

+ updatePoints() 2 was called. Received:  
Array
(
    [testId] => 18
    [qId] => 3
    [feedback] => bp Code failed to execute: line 3
if 1 == 1
SyntaxError: invalid syntax

    [subpoints] => .8
    [max] => .80
)

+ modA was able to retrieve all rows from feedback for testId = 18 and qId = 3
+ obtained 2 rows
error: 0
+ updatePoints() in backend returning:
Array
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 3
    [feedback] => b-40p Code failed to execute: line 3
if 1 == 1
SyntaxError: invalid syntax

    [points] => 5
    [max] => 40
)

+ updatePoints() : 
stdClass Object
(
    [type] => updatePoints
    [error] => 0
    [testId] => 18
    [qId] => 3
    [feedback] => b-40p Code failed to execute: line 3
if 1 == 1
SyntaxError: invalid syntax

    [points] => 5
    [max] => 40
)

+ execom failed. pls check logs. 
